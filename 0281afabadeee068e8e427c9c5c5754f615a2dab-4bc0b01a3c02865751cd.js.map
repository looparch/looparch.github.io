{"version":3,"sources":["webpack:///./node_modules/core-js/modules/es.array.reduce-right.js","webpack:///./node_modules/voca/index.js","webpack:///./src/components/seo.js"],"names":["$","$reduceRight","right","arrayMethodIsStrict","CHROME_VERSION","IS_NODE","target","proto","forced","reduceRight","callbackfn","this","arguments","length","undefined","factory","isNil","value","coerceToBoolean","defaultValue","Boolean","isString","subject","coerceToString","String","capitalize","restToLower","subjectString","restToLowerCaseBoolean","toLowerCase","substr","toUpperCase","lowerCase","diacriticalMark","base","REGEXP_COMBINING_MARKS","RegExp","REGEXP_SURROGATE_PAIRS","REGEXP_UNICODE_CHARACTER","REGEXP_WHITESPACE","REGEXP_TRIM_LEFT","REGEXP_TRIM_RIGHT","REGEXP_DIGIT","REGEXP_SPECIAL_CHARACTERS","REGEXP_NON_LATIN","REGEXP_HTML_SPECIAL_CHARACTERS","REGEXP_CONVERSION_SPECIFICATION","REGEXP_TRAILING_ZEROS","REGEXP_FLAGS","REGEXP_TAG_LIST","lowerCaseLetter","upperCaseLetter","REGEXP_WORD","REGEXP_LATIN_WORD","REGEXP_ALPHA","REGEXP_ALPHA_DIGIT","REGEXP_EXTENDED_ASCII","nilDefault","toString","words","pattern","flags","patternRegExp","test","flagsString","match","wordToCamel","word","index","kebabCase","map","join","swapAndConcat","swapped","character","upperCase","clipNumber","downLimit","upLimit","toInteger","Infinity","truncate","end","lengthInt","endString","coerceToNumber","Number","nanDefault","codePointAt","position","subjectStringLength","positionNumber","codePoint","firstCodePoint","charCodeAt","secondCodePoint","isLowSurrogate","highSurrogate","lowSurrogate","getAstralNumberFromSurrogatePair","reduce","Array","prototype","ReplacementIndex","repeat","times","timesInt","repeatString","buildPadding","padCharacters","padLeft","pad","padString","padRight","addSignToFormattedNumber","replacementNumber","formattedReplacement","conversion","signSpecifier","float","replacement","parseFloat","isNaN","precision","typeSpecifier","toFixed","toExponential","nonZeroPrecision","toPrecision","replace","formatFloatAsShort","integerBase","integer","parseInt","fromCharCode","integerDecimal","stringFormat","compute","formatFunction","width","alignmentSpecifier","getPaddingCharacter","alignAndPad","ConversionSpecification","properties","percent","paddingSpecifier","replacementIndex","replacements","conversionSpecification","widthSpecifier","precisionSpecifier","isPercentLiteral","slice","actualReplacementIndex","getIndexByPosition","incrementOnEmptyPosition","replacementsLength","Error","validate","sprintf","format","formatString","_len","_key","boundReplacementMatch","bind","increment","paddingCharacter","escapeCharactersMap","replaceSpecialCharacter","escapeRegExp","unescapeCharactersMap","characters","Object","keys","reduceUnescapedString","string","key","diacritics","diacriticsMap","getLatinCharacter","characterWithoutDiacritic","forEach","removeCombiningMarks","cleanCharacter","latinise","includes","search","searchString","indexOf","appendFlagToRegExp","appendFlag","regularExpressionFlags","source","_slicedToArray","arr","i","isArray","Symbol","iterator","_arr","_n","_d","_e","_s","_i","next","done","push","err","sliceIterator","TypeError","sortStringByLength","str1","str2","reduce$1","trimLeft","whitespace$$1","whitespaceString","matchWhitespace","call","trimmed","trimRight","determineOptions","options","newLine","indent","cut","isAlpha","hasSubstringAtIndex","substring","lookBehind","indexOffset","extractedSubstring","parseTagName","tagContent","state","tagName","char","globalObject$1","globalObject","global","self","Function","previousV","v","functions","camelCase","decapitalize","snakeCase","swapCase","split","titleCase","noSplit","noSplitArray","wordsRegExp","count","countGraphemes","countSubstrings","substringString","substringLength","matchIndex","countWhere","predicate","context","predicateWithContext","countTruthy","countWords","escapeHtml","unescapeHtml","vprintf","apply","concat","arr2","from","_toConsumableArray","fromIndex","lastIndexOf","fromIndexNumber","charAt","first","graphemeAt","graphemeMatch","graphemeMatchIndex","exec","lastIndex","last","prune","truncatedLength","offset","wordInsertLength","start","insert","toInsert","toInsertString","paddingLength","paddingSideLength","paddingSideRemainingLength","replaceAll","regExp","reverse","reverseGrapheme","reversedString","$0","$1","$2","slugify","splice","deleteCount","toAdd","toAddString","startPosition","deleteCountNumber","tr","to","values","_extractKeysAndValues","object","sort","extractKeysAndValues","_extractKeysAndValues2","keysLength","result","valuesLength","isMatch","matchValue","keyIndex","trim","whitespace","wordWrap","_determineOptions","subjectLength","wrappedLine","spaceToWrapAt","endsWith","isAlphaDigit","isBlank","isDigit","isEmpty","isLowerCase","valueString","isNumeric","valueNumeric","isUpperCase","matches","patternString","startsWith","startString","chars","codePoints","codePointArray","codePointNumber","graphemes","separator","limit","stripBom","stripTags","allowableTags","allowableTagsString","tags","tagsList","parseTagList","replacementString","hasAllowableTags","hasSubstring","depth","output","quote","advance","noConflict","version","ChainWrapper","explicitChain","_wrappedValue","_explicitChain","Voca","valueOf","toJSON","chain","thru","changer","name","functionInstance","args","assign","hasOwnProperty","module","exports","SEO","props","getBreadcrumbsFromLocation","location","pathname","splitLocation","breadcrumbObj","itemListElement","element","pathnameBuild","item","origin","render","title","description","image","imgWidth","imgHeight","pageUrl","postNode","pagePath","postSEO","pageSEO","articleSEO","customTitle","siteMetadata","siteImage","siteUrl","shareImage","dateModified","Date","keywords","shareImageWidth","shareImageHeight","breadcrumbJson","internal","content","getSrc","heroImage","gatsbyImageData","height","publishDate","schemaOrgJSONLD","url","alternateName","potentialAction","legalName","logo","foundingDate","address","streetAddress","addressLocality","addressRegion","postalCode","addressCountry","contactPoint","contactType","email","sameAs","telephone","priceRange","openingHours","geo","latitude","longitude","mainEntityOfPage","headline","datePublished","author","publisher","childMarkdownRemark","html","href","type","JSON","stringify","async","src","property","userTwitter","React","Component"],"mappings":"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","file":"0281afabadeee068e8e427c9c5c5754f615a2dab-4bc0b01a3c02865751cd.js","sourcesContent":["'use strict';\nvar $ = require('../internals/export');\nvar $reduceRight = require('../internals/array-reduce').right;\nvar arrayMethodIsStrict = require('../internals/array-method-is-strict');\nvar CHROME_VERSION = require('../internals/engine-v8-version');\nvar IS_NODE = require('../internals/engine-is-node');\n\nvar STRICT_METHOD = arrayMethodIsStrict('reduceRight');\n// Chrome 80-82 has a critical bug\n// https://bugs.chromium.org/p/chromium/issues/detail?id=1049982\nvar CHROME_BUG = !IS_NODE && CHROME_VERSION > 79 && CHROME_VERSION < 83;\n\n// `Array.prototype.reduceRight` method\n// https://tc39.es/ecma262/#sec-array.prototype.reduceright\n$({ target: 'Array', proto: true, forced: !STRICT_METHOD || CHROME_BUG }, {\n  reduceRight: function reduceRight(callbackfn /* , initialValue */) {\n    return $reduceRight(this, callbackfn, arguments.length, arguments.length > 1 ? arguments[1] : undefined);\n  }\n});\n","require(\"core-js/modules/es.array.reduce.js\");\n\nrequire(\"core-js/modules/es.array.reduce-right.js\");\n\n/*! \n * Voca string library 1.4.0\n * https://vocajs.com\n *\n * Copyright Dmitri Pavlutin and other contributors\n * Released under the MIT license\n */\n(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() : typeof define === 'function' && define.amd ? define(factory) : global.v = factory();\n})(this, function () {\n  'use strict';\n  /**\n   * Checks if `value` is `null` or `undefined`\n   *\n   * @ignore\n   * @function isNil\n   * @param {*} value The object to check\n   * @return {boolean} Returns `true` is `value` is `undefined` or `null`, `false` otherwise\n   */\n\n  function isNil(value) {\n    return value === undefined || value === null;\n  }\n  /**\n   * Converts the `value` to a boolean. If `value` is `undefined` or `null`, returns `defaultValue`.\n   *\n   * @ignore\n   * @function toBoolean\n   * @param {*} value The value to convert.\n   * @param {boolean} [defaultValue=false] The default value.\n   * @return {boolean} Returns the coercion to boolean.\n   */\n\n\n  function coerceToBoolean(value) {\n    var defaultValue = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n\n    if (isNil(value)) {\n      return defaultValue;\n    }\n\n    return Boolean(value);\n  }\n  /**\n   * Checks whether `subject` is a string primitive type.\n   *\n   * @function isString\n   * @static\n   * @since 1.0.0\n   * @memberOf Query\n   * @param {string} subject The value to verify.\n   * @return {boolean} Returns `true` if `subject` is string primitive type or `false` otherwise.\n   * @example\n   * v.isString('vacation');\n   * // => true\n   *\n   * v.isString(560);\n   * // => false\n   */\n\n\n  function isString(subject) {\n    return typeof subject === 'string';\n  }\n  /**\n   * Get the string representation of the `value`.\n   * Converts the `value` to string.\n   * If `value` is `null` or `undefined`, return `defaultValue`.\n   *\n   * @ignore\n   * @function toString\n   * @param {*} value             The value to convert.\n   * @param {*} [defaultValue=''] The default value to return.\n   * @return {string|null}        Returns the string representation of `value`. Returns `defaultValue` if `value` is\n   *                              `null` or `undefined`.\n   */\n\n\n  function coerceToString(value) {\n    var defaultValue = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';\n\n    if (isNil(value)) {\n      return defaultValue;\n    }\n\n    if (isString(value)) {\n      return value;\n    }\n\n    return String(value);\n  }\n  /**\n   * Converts the first character of `subject` to upper case. If `restToLower` is `true`, convert the rest of\n   * `subject` to lower case.\n   *\n   * @function capitalize\n   * @static\n   * @since 1.0.0\n   * @memberOf Case\n   * @param  {string}  [subject='']        The string to capitalize.\n   * @param  {boolean} [restToLower=false] Convert the rest of `subject` to lower case.\n   * @return {string}                      Returns the capitalized string.\n   * @example\n   * v.capitalize('apple');\n   * // => 'Apple'\n   *\n   * v.capitalize('aPPle', true);\n   * // => 'Apple'\n   */\n\n\n  function capitalize(subject, restToLower) {\n    var subjectString = coerceToString(subject);\n    var restToLowerCaseBoolean = coerceToBoolean(restToLower);\n\n    if (subjectString === '') {\n      return '';\n    }\n\n    if (restToLowerCaseBoolean) {\n      subjectString = subjectString.toLowerCase();\n    }\n\n    return subjectString.substr(0, 1).toUpperCase() + subjectString.substr(1);\n  }\n  /**\n   * Converts the `subject` to lower case.\n   *\n   * @function lowerCase\n   * @static\n   * @since 1.0.0\n   * @memberOf Case\n   * @param  {string} [subject=''] The string to convert to lower case.\n   * @return {string}              Returns the lower case string.\n   * @example\n   * v.lowerCase('Green');\n   * // => 'green'\n   *\n   * v.lowerCase('BLUE');\n   * // => 'blue'\n   */\n\n\n  function lowerCase(subject) {\n    var subjectString = coerceToString(subject, '');\n    return subjectString.toLowerCase();\n  }\n  /**\n   * A regular expression string matching digits\n   *\n   * @type {string}\n   * @ignore\n   */\n\n\n  var digit = '\\\\d';\n  /**\n   * A regular expression string matching whitespace\n   *\n   * @type {string}\n   * @ignore\n   */\n\n  var whitespace = \"\\\\s\\\\uFEFF\\\\xA0\";\n  /**\n   * A regular expression string matching high surrogate\n   *\n   * @type {string}\n   * @ignore\n   */\n\n  var highSurrogate = \"\\\\uD800-\\\\uDBFF\";\n  /**\n   * A regular expression string matching low surrogate\n   *\n   * @type {string}\n   * @ignore\n   */\n\n  var lowSurrogate = \"\\\\uDC00-\\\\uDFFF\";\n  /**\n   * A regular expression string matching diacritical mark\n   *\n   * @type {string}\n   * @ignore\n   */\n\n  var diacriticalMark = \"\\\\u0300-\\\\u036F\\\\u1AB0-\\\\u1AFF\\\\u1DC0-\\\\u1DFF\\\\u20D0-\\\\u20FF\\\\uFE20-\\\\uFE2F\";\n  /**\n   * A regular expression to match the base character for a combining mark\n   *\n   * @type {string}\n   * @ignore\n   */\n\n  var base = \"\\\\0-\\\\u02FF\\\\u0370-\\\\u1AAF\\\\u1B00-\\\\u1DBF\\\\u1E00-\\\\u20CF\\\\u2100-\\\\uD7FF\\\\uE000-\\\\uFE1F\\\\uFE30-\\\\uFFFF\";\n  /**\n   * Regular expression to match combining marks\n   *\n   * @see http://unicode.org/faq/char_combmark.html\n   * @type {RegExp}\n   * @ignore\n   */\n\n  var REGEXP_COMBINING_MARKS = new RegExp('([' + base + ']|[' + highSurrogate + '][' + lowSurrogate + ']|[' + highSurrogate + '](?![' + lowSurrogate + '])|(?:[^' + highSurrogate + ']|^)[' + lowSurrogate + '])([' + diacriticalMark + ']+)', 'g');\n  /**\n   * Regular expression to match surrogate pairs\n   *\n   * @see http://www.unicode.org/faq/utf_bom.html#utf16-2\n   * @type {RegExp}\n   * @ignore\n   */\n\n  var REGEXP_SURROGATE_PAIRS = new RegExp('([' + highSurrogate + '])([' + lowSurrogate + '])', 'g');\n  /**\n   * Regular expression to match a unicode character\n   *\n   * @type {RegExp}\n   * @ignore\n   */\n\n  var REGEXP_UNICODE_CHARACTER = new RegExp('((?:[' + base + ']|[' + highSurrogate + '][' + lowSurrogate + ']|[' + highSurrogate + '](?![' + lowSurrogate + '])|(?:[^' + highSurrogate + ']|^)[' + lowSurrogate + '])(?:[' + diacriticalMark + ']+))|\\\n([' + highSurrogate + '][' + lowSurrogate + \"])|([\\\\n\\\\r\\\\u2028\\\\u2029])|(.)\", 'g');\n  /**\n   * Regular expression to match whitespaces\n   *\n   * @type {RegExp}\n   * @ignore\n   */\n\n  var REGEXP_WHITESPACE = new RegExp('[' + whitespace + ']');\n  /**\n   * Regular expression to match whitespaces from the left side\n   *\n   * @type {RegExp}\n   * @ignore\n   */\n\n  var REGEXP_TRIM_LEFT = new RegExp('^[' + whitespace + ']+');\n  /**\n   * Regular expression to match whitespaces from the right side\n   *\n   * @type {RegExp}\n   * @ignore\n   */\n\n  var REGEXP_TRIM_RIGHT = new RegExp('[' + whitespace + ']+$');\n  /**\n   * Regular expression to match digit characters\n   *\n   * @type {RegExp}\n   * @ignore\n   */\n\n  var REGEXP_DIGIT = new RegExp('^' + digit + '+$');\n  /**\n   * Regular expression to match regular expression special characters\n   *\n   * @type {RegExp}\n   * @ignore\n   */\n\n  var REGEXP_SPECIAL_CHARACTERS = /[-[\\]{}()*+!<=:?./\\\\^$|#,]/g;\n  /**\n   * Regular expression to match not latin characters\n   *\n   * @type {RegExp}\n   * @ignore\n   */\n\n  var REGEXP_NON_LATIN = /[^A-Za-z0-9]/g;\n  /**\n   * Regular expression to match HTML special characters.\n   *\n   * @type {RegExp}\n   * @ignore\n   */\n\n  var REGEXP_HTML_SPECIAL_CHARACTERS = /[<>&\"'`]/g;\n  /**\n   * Regular expression to match sprintf format string\n   *\n   * @type {RegExp}\n   * @ignore\n   */\n\n  var REGEXP_CONVERSION_SPECIFICATION = /(%{1,2})(?:(\\d+)\\$)?(\\+)?([ 0]|'.{1})?(-)?(\\d+)?(?:\\.(\\d+))?([bcdiouxXeEfgGs])?/g;\n  /**\n   * Regular expression to match trailing zeros in a number\n   *\n   * @type {RegExp}\n   * @ignore\n   */\n\n  var REGEXP_TRAILING_ZEROS = /\\.?0+$/g;\n  /**\n   * Regular expression to match flags from a regular expression.\n   *\n   * @type {RegExp}\n   * @ignore\n   */\n\n  var REGEXP_FLAGS = /[gimuy]*$/;\n  /**\n   * Regular expression to match a list of tags.\n   *\n   * @see https://html.spec.whatwg.org/multipage/syntax.html#syntax-tag-name\n   * @type {RegExp}\n   * @ignore\n   */\n\n  var REGEXP_TAG_LIST = /<([A-Za-z0-9]+)>/g;\n  /**\n   * A regular expression to match the General Punctuation Unicode block\n   *\n   * @type {string}\n   * @ignore\n   */\n\n  var generalPunctuationBlock = \"\\\\u2000-\\\\u206F\";\n  /**\n   * A regular expression to match non characters from from Basic Latin and Latin-1 Supplement Unicode blocks\n   *\n   * @type {string}\n   * @ignore\n   */\n\n  var nonCharacter = '\\\\x00-\\\\x2F\\\\x3A-\\\\x40\\\\x5B-\\\\x60\\\\x7b-\\\\xBF\\\\xD7\\\\xF7';\n  /**\n   * A regular expression to match the dingbat Unicode block\n   *\n   * @type {string}\n   * @ignore\n   */\n\n  var dingbatBlock = \"\\\\u2700-\\\\u27BF\";\n  /**\n   * A regular expression string that matches lower case letters: LATIN\n   *\n   * @type {string}\n   * @ignore\n   */\n\n  var lowerCaseLetter = \"a-z\\\\xB5\\\\xDF-\\\\xF6\\\\xF8-\\\\xFF\\\\u0101\\\\u0103\\\\u0105\\\\u0107\\\\u0109\\\\u010B\\\\u010D\\\\u010F\\\\u0111\\\\u0113\\\\u0115\\\\u0117\\\\u0119\\\\u011B\\\\u011D\\\\u011F\\\\u0121\\\\u0123\\\\u0125\\\\u0127\\\\u0129\\\\u012B\\\\u012D\\\\u012F\\\\u0131\\\\u0133\\\\u0135\\\\u0137\\\\u0138\\\\u013A\\\\u013C\\\\u013E\\\\u0140\\\\u0142\\\\u0144\\\\u0146\\\\u0148\\\\u0149\\\\u014B\\\\u014D\\\\u014F\\\\u0151\\\\u0153\\\\u0155\\\\u0157\\\\u0159\\\\u015B\\\\u015D\\\\u015F\\\\u0161\\\\u0163\\\\u0165\\\\u0167\\\\u0169\\\\u016B\\\\u016D\\\\u016F\\\\u0171\\\\u0173\\\\u0175\\\\u0177\\\\u017A\\\\u017C\\\\u017E-\\\\u0180\\\\u0183\\\\u0185\\\\u0188\\\\u018C\\\\u018D\\\\u0192\\\\u0195\\\\u0199-\\\\u019B\\\\u019E\\\\u01A1\\\\u01A3\\\\u01A5\\\\u01A8\\\\u01AA\\\\u01AB\\\\u01AD\\\\u01B0\\\\u01B4\\\\u01B6\\\\u01B9\\\\u01BA\\\\u01BD-\\\\u01BF\\\\u01C6\\\\u01C9\\\\u01CC\\\\u01CE\\\\u01D0\\\\u01D2\\\\u01D4\\\\u01D6\\\\u01D8\\\\u01DA\\\\u01DC\\\\u01DD\\\\u01DF\\\\u01E1\\\\u01E3\\\\u01E5\\\\u01E7\\\\u01E9\\\\u01EB\\\\u01ED\\\\u01EF\\\\u01F0\\\\u01F3\\\\u01F5\\\\u01F9\\\\u01FB\\\\u01FD\\\\u01FF\\\\u0201\\\\u0203\\\\u0205\\\\u0207\\\\u0209\\\\u020B\\\\u020D\\\\u020F\\\\u0211\\\\u0213\\\\u0215\\\\u0217\\\\u0219\\\\u021B\\\\u021D\\\\u021F\\\\u0221\\\\u0223\\\\u0225\\\\u0227\\\\u0229\\\\u022B\\\\u022D\\\\u022F\\\\u0231\\\\u0233-\\\\u0239\\\\u023C\\\\u023F\\\\u0240\\\\u0242\\\\u0247\\\\u0249\\\\u024B\\\\u024D\\\\u024F\";\n  /**\n   * A regular expression string that matches upper case letters: LATIN\n   *\n   * @type {string}\n   * @ignore\n   */\n\n  var upperCaseLetter = \"\\\\x41-\\\\x5a\\\\xc0-\\\\xd6\\\\xd8-\\\\xde\\\\u0100\\\\u0102\\\\u0104\\\\u0106\\\\u0108\\\\u010a\\\\u010c\\\\u010e\\\\u0110\\\\u0112\\\\u0114\\\\u0116\\\\u0118\\\\u011a\\\\u011c\\\\u011e\\\\u0120\\\\u0122\\\\u0124\\\\u0126\\\\u0128\\\\u012a\\\\u012c\\\\u012e\\\\u0130\\\\u0132\\\\u0134\\\\u0136\\\\u0139\\\\u013b\\\\u013d\\\\u013f\\\\u0141\\\\u0143\\\\u0145\\\\u0147\\\\u014a\\\\u014c\\\\u014e\\\\u0150\\\\u0152\\\\u0154\\\\u0156\\\\u0158\\\\u015a\\\\u015c\\\\u015e\\\\u0160\\\\u0162\\\\u0164\\\\u0166\\\\u0168\\\\u016a\\\\u016c\\\\u016e\\\\u0170\\\\u0172\\\\u0174\\\\u0176\\\\u0178\\\\u0179\\\\u017b\\\\u017d\\\\u0181\\\\u0182\\\\u0184\\\\u0186\\\\u0187\\\\u0189-\\\\u018b\\\\u018e-\\\\u0191\\\\u0193\\\\u0194\\\\u0196-\\\\u0198\\\\u019c\\\\u019d\\\\u019f\\\\u01a0\\\\u01a2\\\\u01a4\\\\u01a6\\\\u01a7\\\\u01a9\\\\u01ac\\\\u01ae\\\\u01af\\\\u01b1-\\\\u01b3\\\\u01b5\\\\u01b7\\\\u01b8\\\\u01bc\\\\u01c4\\\\u01c5\\\\u01c7\\\\u01c8\\\\u01ca\\\\u01cb\\\\u01cd\\\\u01cf\\\\u01d1\\\\u01d3\\\\u01d5\\\\u01d7\\\\u01d9\\\\u01db\\\\u01de\\\\u01e0\\\\u01e2\\\\u01e4\\\\u01e6\\\\u01e8\\\\u01ea\\\\u01ec\\\\u01ee\\\\u01f1\\\\u01f2\\\\u01f4\\\\u01f6-\\\\u01f8\\\\u01fa\\\\u01fc\\\\u01fe\\\\u0200\\\\u0202\\\\u0204\\\\u0206\\\\u0208\\\\u020a\\\\u020c\\\\u020e\\\\u0210\\\\u0212\\\\u0214\\\\u0216\\\\u0218\\\\u021a\\\\u021c\\\\u021e\\\\u0220\\\\u0222\\\\u0224\\\\u0226\\\\u0228\\\\u022a\\\\u022c\\\\u022e\\\\u0230\\\\u0232\\\\u023a\\\\u023b\\\\u023d\\\\u023e\\\\u0241\\\\u0243-\\\\u0246\\\\u0248\\\\u024a\\\\u024c\\\\u024e\";\n  /**\n   * Regular expression to match Unicode words\n   *\n   * @type {RegExp}\n   * @ignore\n   */\n\n  var REGEXP_WORD = new RegExp('(?:[' + upperCaseLetter + '][' + diacriticalMark + ']*)?(?:[' + lowerCaseLetter + '][' + diacriticalMark + ']*)+|\\\n(?:[' + upperCaseLetter + '][' + diacriticalMark + ']*)+(?![' + lowerCaseLetter + '])|\\\n[' + digit + ']+|\\\n[' + dingbatBlock + ']|\\\n[^' + nonCharacter + generalPunctuationBlock + whitespace + ']+', 'g');\n  /**\n   * Regular expression to match words from Basic Latin and Latin-1 Supplement blocks\n   *\n   * @type {RegExp}\n   * @ignore\n   */\n\n  var REGEXP_LATIN_WORD = /[A-Z\\xC0-\\xD6\\xD8-\\xDE]?[a-z\\xDF-\\xF6\\xF8-\\xFF]+|[A-Z\\xC0-\\xD6\\xD8-\\xDE]+(?![a-z\\xDF-\\xF6\\xF8-\\xFF])|\\d+/g;\n  /**\n   * Regular expression to match alpha characters\n   *\n   * @see http://stackoverflow.com/a/22075070/1894471\n   * @type {RegExp}\n   * @ignore\n   */\n\n  var REGEXP_ALPHA = new RegExp('^(?:[' + lowerCaseLetter + upperCaseLetter + '][' + diacriticalMark + ']*)+$');\n  /**\n   * Regular expression to match alpha and digit characters\n   *\n   * @see http://stackoverflow.com/a/22075070/1894471\n   * @type {RegExp}\n   * @ignore\n   */\n\n  var REGEXP_ALPHA_DIGIT = new RegExp('^((?:[' + lowerCaseLetter + upperCaseLetter + '][' + diacriticalMark + ']*)|[' + digit + '])+$');\n  /**\n   * Regular expression to match Extended ASCII characters, i.e. the first 255\n   *\n   * @type {RegExp}\n   * @ignore\n   */\n\n  var REGEXP_EXTENDED_ASCII = /^[\\x01-\\xFF]*$/;\n  /**\n   * Verifies if `value` is `undefined` or `null` and returns `defaultValue`. In other case returns `value`.\n   *\n   * @ignore\n   * @function nilDefault\n   * @param {*} value The value to verify.\n   * @param {*} defaultValue The default value.\n   * @return {*} Returns `defaultValue` if `value` is `undefined` or `null`, otherwise `defaultValue`.\n   */\n\n  function nilDefault(value, defaultValue) {\n    return value == null ? defaultValue : value;\n  }\n  /**\n   * Get the string representation of the `value`.\n   * Converts the `value` to string.\n   *\n   * @ignore\n   * @function toString\n   * @param {*} value             The value to convert.\n   * @return {string|null}        Returns the string representation of `value`.\n   */\n\n\n  function toString(value) {\n    if (isNil(value)) {\n      return null;\n    }\n\n    if (isString(value)) {\n      return value;\n    }\n\n    return String(value);\n  }\n  /**\n   * Splits `subject` into an array of words.\n   *\n   * @function words\n   * @static\n   * @since 1.0.0\n   * @memberOf Split\n   * @param {string} [subject=''] The string to split into words.\n   * @param {string|RegExp} [pattern] The pattern to watch words. If `pattern` is not RegExp, it is transformed to `new RegExp(pattern, flags)`.\n   * @param {string} [flags=''] The regular expression flags. Applies when `pattern` is string type.\n   * @return {Array} Returns the array of words.\n   * @example\n   * v.words('gravity can cross dimensions');\n   * // => ['gravity', 'can', 'cross', 'dimensions']\n   *\n   * v.words('GravityCanCrossDimensions');\n   * // => ['Gravity', 'Can', 'Cross', 'Dimensions']\n   *\n   * v.words('Gravity - can cross dimensions!');\n   * // => ['Gravity', 'can', 'cross', 'dimensions']\n   *\n   * v.words('Earth gravity', /[^\\s]+/g);\n   * // => ['Earth', 'gravity']\n   */\n\n\n  function words(subject, pattern, flags) {\n    var subjectString = coerceToString(subject);\n    var patternRegExp = void 0;\n\n    if (isNil(pattern)) {\n      patternRegExp = REGEXP_EXTENDED_ASCII.test(subjectString) ? REGEXP_LATIN_WORD : REGEXP_WORD;\n    } else if (pattern instanceof RegExp) {\n      patternRegExp = pattern;\n    } else {\n      var flagsString = toString(nilDefault(flags, ''));\n      patternRegExp = new RegExp(toString(pattern), flagsString);\n    }\n\n    return nilDefault(subjectString.match(patternRegExp), []);\n  }\n  /**\n   * Transforms the `word` into camel case chunk.\n   *\n   * @param  {string} word  The word string\n   * @param  {number} index The index of the word in phrase.\n   * @return {string}       The transformed word.\n   * @ignore\n   */\n\n\n  function wordToCamel(word, index) {\n    return index === 0 ? lowerCase(word) : capitalize(word, true);\n  }\n  /**\n   * Converts the `subject` to <a href=\"https://en.wikipedia.org/wiki/CamelCase\">camel case</a>.\n   *\n   * @function camelCase\n   * @static\n   * @since 1.0.0\n   * @memberOf Case\n   * @param  {string} [subject=''] The string to convert to camel case.\n   * @return {string}              The camel case string.\n   * @example\n   * v.camelCase('bird flight');\n   * // => 'birdFlight'\n   *\n   * v.camelCase('BirdFlight');\n   * // => 'birdFlight'\n   *\n   * v.camelCase('-BIRD-FLIGHT-');\n   * // => 'birdFlight'\n   */\n\n\n  function camelCase(subject) {\n    var subjectString = coerceToString(subject);\n\n    if (subjectString === '') {\n      return '';\n    }\n\n    return words(subjectString).map(wordToCamel).join('');\n  }\n  /**\n   * Converts the first character of `subject` to lower case.\n   *\n   * @function decapitalize\n   * @static\n   * @since 1.0.0\n   * @memberOf Case\n   * @param  {string} [subject=''] The string to decapitalize.\n   * @return {string}              Returns the decapitalized string.\n   * @example\n   * v.decapitalize('Sun');\n   * // => 'sun'\n   *\n   * v.decapitalize('moon');\n   * // => 'moon'\n   */\n\n\n  function decapitalize(subject) {\n    var subjectString = coerceToString(subject);\n\n    if (subjectString === '') {\n      return '';\n    }\n\n    return subjectString.substr(0, 1).toLowerCase() + subjectString.substr(1);\n  }\n  /**\n   * Converts the `subject` to <a href=\"https://en.wikipedia.org/wiki/Letter_case#cite_ref-13\">kebab case</a>,\n   * also called <i>spinal case</i> or <i>lisp case</i>.\n   *\n   * @function kebabCase\n   * @static\n   * @since 1.0.0\n   * @memberOf Case\n   * @param  {string} [subject=''] The string to convert to kebab case.\n   * @return {string}              Returns the kebab case string.\n   * @example\n   * v.kebabCase('goodbye blue sky');\n   * // => 'goodbye-blue-sky'\n   *\n   * v.kebabCase('GoodbyeBlueSky');\n   * // => 'goodbye-blue-sky'\n   *\n   * v.kebabCase('-Goodbye-Blue-Sky-');\n   * // => 'goodbye-blue-sky'\n   */\n\n\n  function kebabCase(subject) {\n    var subjectString = coerceToString(subject);\n\n    if (subjectString === '') {\n      return '';\n    }\n\n    return words(subjectString).map(lowerCase).join('-');\n  }\n  /**\n   * Converts the `subject` to <a href=\"https://en.wikipedia.org/wiki/Snake_case\">snake case</a>.\n   *\n   * @function snakeCase\n   * @static\n   * @since 1.0.0\n   * @memberOf Case\n   * @param  {string} [subject=''] The string to convert to snake case.\n   * @return {string}              Returns the snake case string.\n   * @example\n   * v.snakeCase('learning to fly');\n   * // => 'learning_to_fly'\n   *\n   * v.snakeCase('LearningToFly');\n   * // => 'learning_to_fly'\n   *\n   * v.snakeCase('-Learning-To-Fly-');\n   * // => 'learning_to_fly'\n   */\n\n\n  function snakeCase(subject) {\n    var subjectString = coerceToString(subject);\n\n    if (subjectString === '') {\n      return '';\n    }\n\n    return words(subjectString).map(lowerCase).join('_');\n  }\n  /**\n   * Converts the `subject` to upper case.\n   *\n   * @function upperCase\n   * @static\n   * @since 1.0.0\n   * @memberOf Case\n   * @param  {string} [subject=''] The string to convert to upper case.\n   * @return {string}              Returns the upper case string.\n   * @example\n   * v.upperCase('school');\n   * // => 'SCHOOL'\n   */\n\n\n  function upperCase(subject) {\n    var subjectString = coerceToString(subject);\n    return subjectString.toUpperCase();\n  }\n  /**\n   * Converts the uppercase alpha caracters of `subject` to lowercase and lowercase \n   * characters to uppercase.\n   *\n   * @function swapCase\n   * @static\n   * @since 1.3.0\n   * @memberOf Case\n   * @param  {string} [subject=''] The string to swap the case.\n   * @return {string}              Returns the converted string.\n   * @example\n   * v.swapCase('League of Shadows');\n   * // => 'lEAGUE OF sHADOWS'\n   *\n   * v.swapCase('2 Bees');\n   * // => '2 bEES'\n   */\n\n\n  function swapCase(subject) {\n    var subjectString = coerceToString(subject);\n    return subjectString.split('').reduce(swapAndConcat, '');\n  }\n\n  function swapAndConcat(swapped, character) {\n    var lowerCase = character.toLowerCase();\n    var upperCase = character.toUpperCase();\n    return swapped + (character === lowerCase ? upperCase : lowerCase);\n  }\n  /**\n   * Converts the subject to title case.\n   *\n   * @function titleCase\n   * @static\n   * @since 1.4.0\n   * @memberOf Case\n   * @param  {string} [subject=''] The string to convert to title case.\n   * @param  {Array}  [noSplit]    Do not split words at the specified characters.\n   * @return {string}              Returns the title case string.\n   * @example\n   * v.titleCase('learning to fly');\n   * // => 'Learning To Fly'\n   *\n   * v.titleCase('jean-luc is good-looking', ['-']);\n   * // => 'Jean-luc Is Good-looking'\n   */\n\n\n  function titleCase(subject, noSplit) {\n    var subjectString = coerceToString(subject);\n    var noSplitArray = Array.isArray(noSplit) ? noSplit : [];\n    var wordsRegExp = REGEXP_EXTENDED_ASCII.test(subjectString) ? REGEXP_LATIN_WORD : REGEXP_WORD;\n    return subjectString.replace(wordsRegExp, function (word, index) {\n      var isNoSplit = index > 0 && noSplitArray.indexOf(subjectString[index - 1]) >= 0;\n      return isNoSplit ? word.toLowerCase() : capitalize(word, true);\n    });\n  }\n  /**\n   * Clip the number to interval `downLimit` to `upLimit`.\n   *\n   * @ignore\n   * @function clipNumber\n   * @param {number} value The number to clip\n   * @param {number} downLimit The down limit\n   * @param {number} upLimit The upper limit\n   * @return {number} The clipped number\n   */\n\n\n  function clipNumber(value, downLimit, upLimit) {\n    if (value <= downLimit) {\n      return downLimit;\n    }\n\n    if (value >= upLimit) {\n      return upLimit;\n    }\n\n    return value;\n  }\n  /**\n   * Max save integer value\n   *\n   * @ignore\n   * @type {number}\n   */\n\n\n  var MAX_SAFE_INTEGER = 0x1fffffffffffff;\n  /**\n   * Transforms `value` to an integer.\n   *\n   * @ignore\n   * @function toInteger\n   * @param {number} value The number to transform.\n   * @returns {number} Returns the transformed integer.\n   */\n\n  function toInteger(value) {\n    if (value === Infinity) {\n      return MAX_SAFE_INTEGER;\n    }\n\n    if (value === -Infinity) {\n      return -MAX_SAFE_INTEGER;\n    }\n\n    return ~~value;\n  }\n  /**\n   * Truncates `subject` to a new `length`.\n   *\n   * @function truncate\n   * @static\n   * @since 1.0.0\n   * @memberOf Chop\n   * @param  {string} [subject=''] The string to truncate.\n   * @param  {int}    length       The length to truncate the string.\n   * @param  {string} [end='...']  The string to be added at the end.\n   * @return {string}              Returns the truncated string.\n   * @example\n   * v.truncate('Once upon a time', 7);\n   * // => 'Once...'\n   *\n   * v.truncate('Good day, Little Red Riding Hood', 14, ' (...)');\n   * // => 'Good day (...)'\n   *\n   * v.truncate('Once upon', 10);\n   * // => 'Once upon'\n   */\n\n\n  function truncate(subject, length, end) {\n    var subjectString = coerceToString(subject);\n    var lengthInt = isNil(length) ? subjectString.length : clipNumber(toInteger(length), 0, MAX_SAFE_INTEGER);\n    var endString = coerceToString(end, '...');\n\n    if (lengthInt >= subjectString.length) {\n      return subjectString;\n    }\n\n    return subjectString.substr(0, length - endString.length) + endString;\n  }\n  /**\n   * Access a character from `subject` at specified `position`.\n   *\n   * @function charAt\n   * @static\n   * @since 1.0.0\n   * @memberOf Chop\n   * @param  {string} [subject=''] The string to extract from.\n   * @param  {numbers} position The position to get the character.\n   * @return {string} Returns the character at specified position.\n   * @example\n   * v.charAt('helicopter', 0);\n   * // => 'h'\n   *\n   * v.charAt('helicopter', 1);\n   * // => 'e'\n   */\n\n\n  function charAt(subject, position) {\n    var subjectString = coerceToString(subject);\n    return subjectString.charAt(position);\n  }\n\n  var HIGH_SURROGATE_START = 0xD800;\n  var HIGH_SURROGATE_END = 0xDBFF;\n  var LOW_SURROGATE_START = 0xDC00;\n  var LOW_SURROGATE_END = 0xDFFF;\n  /**\n   * Checks if `codePoint` is a high-surrogate number from range 0xD800 to 0xDBFF.\n   *\n   * @ignore\n   * @param {number} codePoint The code point number to be verified\n   * @return {boolean} Returns a boolean whether `codePoint` is a high-surrogate number.\n   */\n\n  function isHighSurrogate(codePoint) {\n    return codePoint >= HIGH_SURROGATE_START && codePoint <= HIGH_SURROGATE_END;\n  }\n  /**\n   * Checks if `codePoint` is a low-surrogate number from range 0xDC00 to 0xDFFF.\n   *\n   * @ignore\n   * @param {number} codePoint The code point number to be verified\n   * @return {boolean} Returns a boolean whether `codePoint` is a low-surrogate number.\n   */\n\n\n  function isLowSurrogate(codePoint) {\n    return codePoint >= LOW_SURROGATE_START && codePoint <= LOW_SURROGATE_END;\n  }\n  /**\n   * Get the astral code point number based on surrogate pair numbers.\n   *\n   * @ignore\n   * @param {number} highSurrogate The high-surrogate code point number.\n   * @param {number} lowSurrogate The low-surrogate code point number.\n   * @return {number} Returns the astral symbol number.\n   */\n\n\n  function getAstralNumberFromSurrogatePair(highSurrogate, lowSurrogate) {\n    return (highSurrogate - HIGH_SURROGATE_START) * 0x400 + lowSurrogate - LOW_SURROGATE_START + 0x10000;\n  }\n  /**\n   * Get the number representation of the `value`.\n   * Converts the `value` to number.\n   * If `value` is `null` or `undefined`, return `defaultValue`.\n   *\n   * @ignore\n   * @function toString\n   * @param {*} value             The value to convert.\n   * @param {*} [defaultValue=''] The default value to return.\n   * @return {number|null}        Returns the number representation of `value`. Returns `defaultValue` if `value` is\n   *                              `null` or `undefined`.\n   */\n\n\n  function coerceToNumber(value) {\n    var defaultValue = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n\n    if (isNil(value)) {\n      return defaultValue;\n    }\n\n    if (typeof value === 'number') {\n      return value;\n    }\n\n    return Number(value);\n  }\n  /**\n   * If `value` is `NaN`, return `defaultValue`. In other case returns `value`.\n   *\n   * @ignore\n   * @function nanDefault\n   * @param {*} value The value to verify.\n   * @param {*} defaultValue The default value.\n   * @return {*} Returns `defaultValue` if `value` is `NaN`, otherwise `defaultValue`.\n   */\n\n\n  function nanDefault(value, defaultValue) {\n    return value !== value ? defaultValue : value;\n  }\n  /**\n   * Get the Unicode code point value of the character at `position`. <br/>\n   * If a valid UTF-16 <a href=\"https://rainsoft.io/what-every-javascript-developer-should-know-about-unicode/#24surrogatepairs\">\n   * surrogate pair</a> starts at `position`, the\n   * <a href=\"https://rainsoft.io/what-every-javascript-developer-should-know-about-unicode/#astralplanes\">astral code point</a>\n   * value at `position` is returned.\n   *\n   * @function codePointAt\n   * @static\n   * @since 1.0.0\n   * @memberOf Chop\n   * @param  {string} [subject=''] The string to extract from.\n   * @param  {number} position The position to get the code point number.\n   * @return {number} Returns a non-negative number less than or equal to `0x10FFFF`.\n   * @example\n   * v.codePointAt('rain', 1);\n   * // => 97, or 0x0061\n   *\n   * v.codePointAt('\\uD83D\\uDE00 is smile', 0); // or '😀 is smile'\n   * // => 128512, or 0x1F600\n   */\n\n\n  function codePointAt(subject, position) {\n    var subjectString = coerceToString(subject);\n    var subjectStringLength = subjectString.length;\n    var positionNumber = coerceToNumber(position);\n    positionNumber = nanDefault(positionNumber, 0);\n\n    if (positionNumber < 0 || positionNumber >= subjectStringLength) {\n      return undefined;\n    }\n\n    var firstCodePoint = subjectString.charCodeAt(positionNumber);\n    var secondCodePoint = void 0;\n\n    if (isHighSurrogate(firstCodePoint) && subjectStringLength > positionNumber + 1) {\n      secondCodePoint = subjectString.charCodeAt(positionNumber + 1);\n\n      if (isLowSurrogate(secondCodePoint)) {\n        return getAstralNumberFromSurrogatePair(firstCodePoint, secondCodePoint);\n      }\n    }\n\n    return firstCodePoint;\n  }\n  /**\n   * Extracts the first `length` characters from `subject`.\n   *\n   * @function first\n   * @static\n   * @since 1.0.0\n   * @memberOf Chop\n   * @param  {string} [subject=''] The string to extract from.\n   * @param  {int}    [length=1]   The number of characters to extract.\n   * @return {string}              Returns the first characters string.\n   * @example\n   * v.first('helicopter');\n   * // => 'h'\n   *\n   * v.first('vehicle', 2);\n   * // => 've'\n   *\n   * v.first('car', 5);\n   * // => 'car'\n   */\n\n\n  function first(subject, length) {\n    var subjectString = coerceToString(subject);\n    var lengthInt = isNil(length) ? 1 : clipNumber(toInteger(length), 0, MAX_SAFE_INTEGER);\n\n    if (subjectString.length <= lengthInt) {\n      return subjectString;\n    }\n\n    return subjectString.substr(0, lengthInt);\n  }\n  /**\n   * Get a grapheme from `subject` at specified `position` taking care of\n   * <a href=\"https://rainsoft.io/what-every-javascript-developer-should-know-about-unicode/#24surrogatepairs\">surrogate pairs</a> and\n   * <a href=\"https://rainsoft.io/what-every-javascript-developer-should-know-about-unicode/#25combiningmarks\">combining marks</a>.\n   *\n   * @function graphemeAt\n   * @static\n   * @since 1.0.0\n   * @memberOf Chop\n   * @param  {string} [subject=''] The string to extract from.\n   * @param  {number} position The position to get the grapheme.\n   * @return {string} Returns the grapheme at specified position.\n   * @example\n   * v.graphemeAt('\\uD835\\uDC00\\uD835\\uDC01', 0); // or '𝐀𝐁'\n   * // => 'A'\n   *\n   * v.graphemeAt('cafe\\u0301', 3); // or 'café'\n   * // => 'é'\n   */\n\n\n  function graphemeAt(subject, position) {\n    var subjectString = coerceToString(subject);\n    var positionNumber = coerceToNumber(position);\n    var graphemeMatch = void 0;\n    var graphemeMatchIndex = 0;\n    positionNumber = nanDefault(positionNumber, 0);\n\n    while ((graphemeMatch = REGEXP_UNICODE_CHARACTER.exec(subjectString)) !== null) {\n      if (graphemeMatchIndex === positionNumber) {\n        REGEXP_UNICODE_CHARACTER.lastIndex = 0;\n        return graphemeMatch[0];\n      }\n\n      graphemeMatchIndex++;\n    }\n\n    return '';\n  }\n  /**\n   * Extracts the last `length` characters from `subject`.\n   *\n   * @function last\n   * @static\n   * @since 1.0.0\n   * @memberOf Chop\n   * @param  {string} [subject=''] The string to extract from.\n   * @param  {int}    [length=1]   The number of characters to extract.\n   * @return {string}              Returns the last characters string.\n   * @example\n   * v.last('helicopter');\n   * // => 'r'\n   *\n   * v.last('vehicle', 2);\n   * // => 'le'\n   *\n   * v.last('car', 5);\n   * // => 'car'\n   */\n\n\n  function last(subject, length) {\n    var subjectString = coerceToString(subject);\n    var lengthInt = isNil(length) ? 1 : clipNumber(toInteger(length), 0, MAX_SAFE_INTEGER);\n\n    if (subjectString.length <= lengthInt) {\n      return subjectString;\n    }\n\n    return subjectString.substr(subjectString.length - lengthInt, lengthInt);\n  }\n  /**\n   * Truncates `subject` to a new `length` and does not break the words. Guarantees that the truncated string is no longer\n   * than `length`.\n   *\n   * @static\n   * @function prune\n   * @since 1.0.0\n   * @memberOf Chop\n   * @param  {string} [subject=''] The string to prune.\n   * @param  {int}    length       The length to prune the string.\n   * @param  {string} [end='...']  The string to be added at the end.\n   * @return {string}              Returns the pruned string.\n   * @example\n   * v.prune('Once upon a time', 7);\n   * // => 'Once...'\n   *\n   * v.prune('Good day, Little Red Riding Hood', 16, ' (more)');\n   * // => 'Good day (more)'\n   *\n   * v.prune('Once upon', 10);\n   * // => 'Once upon'\n   */\n\n\n  function prune(subject, length, end) {\n    var subjectString = coerceToString(subject);\n    var lengthInt = isNil(length) ? subjectString.length : clipNumber(toInteger(length), 0, MAX_SAFE_INTEGER);\n    var endString = coerceToString(end, '...');\n\n    if (lengthInt >= subjectString.length) {\n      return subjectString;\n    }\n\n    var pattern = REGEXP_EXTENDED_ASCII.test(subjectString) ? REGEXP_LATIN_WORD : REGEXP_WORD;\n    var truncatedLength = 0;\n    subjectString.replace(pattern, function (word, offset) {\n      var wordInsertLength = offset + word.length;\n\n      if (wordInsertLength <= lengthInt - endString.length) {\n        truncatedLength = wordInsertLength;\n      }\n    });\n    return subjectString.substr(0, truncatedLength) + endString;\n  }\n  /**\n   * Extracts from `subject` a string from `start` position up to `end` position. The character at `end` position is not\n   * included.\n   *\n   * @function slice\n   * @static\n   * @since 1.0.0\n   * @memberOf Chop\n   * @param  {string} [subject='']         The string to extract from.\n   * @param  {number} start                The position to start extraction. If negative use `subject.length + start`.\n   * @param  {number} [end=subject.length] The position to end extraction. If negative use `subject.length + end`.\n   * @return {string}                      Returns the extracted string.\n   * @note Uses native `String.prototype.slice()`\n   * @example\n   * v.slice('miami', 1);\n   * // => 'iami'\n   *\n   * v.slice('florida', -4);\n   * // => 'rida'\n   *\n   * v.slice('florida', 1, 4);\n   * // => \"lor\"\n   */\n\n\n  function slice(subject, start, end) {\n    return coerceToString(subject).slice(start, end);\n  }\n  /**\n   * Extracts from `subject` a string from `start` position a number of `length` characters.\n   *\n   * @function substr\n   * @static\n   * @since 1.0.0\n   * @memberOf Chop\n   * @param  {string} [subject='']                 The string to extract from.\n   * @param  {number} start                        The position to start extraction.\n   * @param  {number} [length=subject.endOfString] The number of characters to extract. If omitted, extract to the end of `subject`.\n   * @return {string}                              Returns the extracted string.\n   * @note Uses native `String.prototype.substr()`\n   * @example\n   * v.substr('infinite loop', 9);\n   * // => 'loop'\n   *\n   * v.substr('dreams', 2, 2);\n   * // => 'ea'\n   */\n\n\n  function substr(subject, start, length) {\n    return coerceToString(subject).substr(start, length);\n  }\n  /**\n   * Extracts from `subject` a string from `start` position up to `end` position. The character at `end` position is not\n   * included.\n   *\n   * @function substring\n   * @static\n   * @since 1.0.0\n   * @memberOf Chop\n   * @param  {string} [subject='']         The string to extract from.\n   * @param  {number} start                The position to start extraction.\n   * @param  {number} [end=subject.length] The position to end extraction.\n   * @return {string}                      Returns the extracted string.\n   * @note Uses native `String.prototype.substring()`\n   * @example\n   * v.substring('beach', 1);\n   * // => 'each'\n   *\n   * v.substring('ocean', 1, 3);\n   * // => 'ea'\n   */\n\n\n  function substring(subject, start, end) {\n    return coerceToString(subject).substring(start, end);\n  }\n  /**\n   * Counts the characters in `subject`.<br/>\n   *\n   * @function count\n   * @static\n   * @since 1.0.0\n   * @memberOf Count\n   * @param  {string} [subject=''] The string to count characters.\n   * @return {number}              Returns the number of characters in `subject`.\n   * @example\n   * v.count('rain');\n   * // => 4\n   */\n\n\n  function count(subject) {\n    return coerceToString(subject).length;\n  }\n  /**\n   * Counts the graphemes in `subject` taking care of\n   * <a href=\"https://rainsoft.io/what-every-javascript-developer-should-know-about-unicode/#24surrogatepairs\">surrogate pairs</a> and\n   * <a href=\"https://rainsoft.io/what-every-javascript-developer-should-know-about-unicode/#25combiningmarks\">combining marks</a>.\n   *\n   * @function  countGraphemes\n   * @static\n   * @since 1.0.0\n   * @memberOf Count\n   * @param  {string} [subject=''] The string to count graphemes.\n   * @return {number}              Returns the number of graphemes in `subject`.\n   * @example\n   * v.countGraphemes('cafe\\u0301'); // or 'café'\n   * // => 4\n   *\n   * v.countGraphemes('\\uD835\\uDC00\\uD835\\uDC01'); // or '𝐀𝐁'\n   * // => 2\n   *\n   * v.countGraphemes('rain');\n   * // => 4\n   */\n\n\n  function countGrapheme(subject) {\n    return coerceToString(subject).replace(REGEXP_COMBINING_MARKS, '*').replace(REGEXP_SURROGATE_PAIRS, '*').length;\n  }\n  /**\n   * Counts the number of `substring` appearances in `subject`.\n   *\n   * @function countSubstrings\n   * @static\n   * @since 1.0.0\n   * @memberOf Count\n   * @param  {string} [subject=''] The string where to count.\n   * @param  {string} substring    The substring to be counted.\n   * @return {number}              Returns the number of `substring` appearances.\n   * @example\n   * v.countSubstrings('bad boys, bad boys whatcha gonna do?', 'boys');\n   * // => 2\n   *\n   * v.countSubstrings('every dog has its day', 'cat');\n   * // => 0\n   */\n\n\n  function countSubstrings(subject, substring) {\n    var subjectString = coerceToString(subject);\n    var substringString = coerceToString(substring);\n    var substringLength = substringString.length;\n    var count = 0;\n    var matchIndex = 0;\n\n    if (subjectString === '' || substringString === '') {\n      return count;\n    }\n\n    do {\n      matchIndex = subjectString.indexOf(substringString, matchIndex);\n\n      if (matchIndex !== -1) {\n        count++;\n        matchIndex += substringLength;\n      }\n    } while (matchIndex !== -1);\n\n    return count;\n  }\n\n  var reduce = Array.prototype.reduce;\n  /**\n   * Counts the characters in `subject` for which `predicate` returns truthy.\n   *\n   * @function  countWhere\n   * @static\n   * @since 1.0.0\n   * @memberOf Count\n   * @param  {string}   [subject=''] The string to count characters.\n   * @param  {Function} predicate    The predicate function invoked on each character with parameters `(character, index, string)`.\n   * @param  {Object}   [context]    The context to invoke the `predicate`.\n   * @return {number}                Returns the number of characters for which `predicate` returns truthy.\n   * @example\n   * v.countWhere('hola!', v.isAlpha);\n   * // => 4\n   *\n   * v.countWhere('2022', function(character, index, str) {\n   *   return character === '2';\n   * });\n   * // => 3\n   */\n\n  function countWhere(subject, predicate, context) {\n    var subjectString = coerceToString(subject);\n\n    if (subjectString === '' || typeof predicate !== 'function') {\n      return 0;\n    }\n\n    var predicateWithContext = predicate.bind(context);\n    return reduce.call(subjectString, function (countTruthy, character, index) {\n      return predicateWithContext(character, index, subjectString) ? countTruthy + 1 : countTruthy;\n    }, 0);\n  }\n  /**\n   * Counts the number of words in `subject`.\n   *\n   * @function countWords\n   * @static\n   * @since 1.0.0\n   * @memberOf Count\n   * @param {string} [subject=''] The string to split into words.\n   * @param {string|RegExp} [pattern] The pattern to watch words. If `pattern` is not RegExp, it is transformed to `new RegExp(pattern, flags)`.\n   * @param {string} [flags=''] The regular expression flags. Applies when `pattern` is string type.\n   * @return {number} Returns the number of words.\n   * @example\n   * v.countWords('gravity can cross dimensions');\n   * // => 4\n   *\n   * v.countWords('GravityCanCrossDimensions');\n   * // => 4\n   *\n   * v.countWords('Gravity - can cross dimensions!');\n   * // => 4\n   *\n   * v.words('Earth gravity', /[^\\s]+/g);\n   * // => 2\n   */\n\n\n  function countWords(subject, pattern, flags) {\n    return words(subject, pattern, flags).length;\n  }\n  /**\n   * The current index.\n   *\n   * @ignore\n   * @name ReplacementIndex#index\n   * @type {number}\n   * @return {ReplacementIndex} ReplacementIndex instance.\n   */\n\n\n  function ReplacementIndex() {\n    this.index = 0;\n  }\n  /**\n   * Increment the current index.\n   *\n   * @ignore\n   * @return {undefined}\n   */\n\n\n  ReplacementIndex.prototype.increment = function () {\n    this.index++;\n  };\n  /**\n   * Increment the current index by position.\n   *\n   * @ignore\n   * @param {number} [position] The replacement position.\n   * @return {undefined}\n   */\n\n\n  ReplacementIndex.prototype.incrementOnEmptyPosition = function (position) {\n    if (isNil(position)) {\n      this.increment();\n    }\n  };\n  /**\n   * Get the replacement index by position.\n   *\n   * @ignore\n   * @param {number} [position] The replacement position.\n   * @return {number} The replacement index.\n   */\n\n\n  ReplacementIndex.prototype.getIndexByPosition = function (position) {\n    return isNil(position) ? this.index : position - 1;\n  }; // Type specifiers\n\n\n  var TYPE_INTEGER = 'i';\n  var TYPE_INTEGER_BINARY = 'b';\n  var TYPE_INTEGER_ASCII_CHARACTER = 'c';\n  var TYPE_INTEGER_DECIMAL = 'd';\n  var TYPE_INTEGER_OCTAL = 'o';\n  var TYPE_INTEGER_UNSIGNED_DECIMAL = 'u';\n  var TYPE_INTEGER_HEXADECIMAL = 'x';\n  var TYPE_INTEGER_HEXADECIMAL_UPPERCASE = 'X';\n  var TYPE_FLOAT_SCIENTIFIC = 'e';\n  var TYPE_FLOAT_SCIENTIFIC_UPPERCASE = 'E';\n  var TYPE_FLOAT = 'f';\n  var TYPE_FLOAT_SHORT = 'g';\n  var TYPE_FLOAT_SHORT_UPPERCASE = 'G';\n  var TYPE_STRING = 's'; // Simple literals\n\n  var LITERAL_SINGLE_QUOTE = \"'\";\n  var LITERAL_PLUS = '+';\n  var LITERAL_MINUS = '-';\n  var LITERAL_PERCENT_SPECIFIER = '%%'; // Radix constants to format numbers\n\n  var RADIX_BINARY = 2;\n  var RADIX_OCTAL = 8;\n  var RADIX_HEXADECIMAL = 16;\n  /**\n   * Repeats the `subject` number of `times`.\n   *\n   * @function repeat\n   * @static\n   * @since 1.0.0\n   * @memberOf Manipulate\n   * @param {string} [subject=''] The string to repeat.\n   * @param {number} [times=1] The number of times to repeat.\n   * @return {string} Returns the repeated string.\n   * @example\n   * v.repeat('w', 3);\n   * // => 'www'\n   *\n   * v.repeat('world', 0);\n   * // => ''\n   */\n\n  function repeat(subject, times) {\n    var subjectString = coerceToString(subject);\n    var timesInt = isNil(times) ? 1 : clipNumber(toInteger(times), 0, MAX_SAFE_INTEGER);\n    var repeatString = '';\n\n    while (timesInt) {\n      if (timesInt & 1) {\n        repeatString += subjectString;\n      }\n\n      if (timesInt > 1) {\n        subjectString += subjectString;\n      }\n\n      timesInt >>= 1;\n    }\n\n    return repeatString;\n  }\n  /**\n   * Creates the padding string.\n   *\n   * @ignore\n   * @param {string} padCharacters The characters to create padding string.\n   * @param {number} length The padding string length.\n   * @return {string} The padding string.\n   */\n\n\n  function buildPadding(padCharacters, length) {\n    var padStringRepeat = toInteger(length / padCharacters.length);\n    var padStringRest = length % padCharacters.length;\n    return repeat(padCharacters, padStringRepeat + padStringRest).substr(0, length);\n  }\n  /**\n   * Pads `subject` from left to a new `length`.\n   *\n   * @function padLeft\n   * @static\n   * @since 1.0.0\n   * @memberOf Manipulate\n   * @param {string} [subject=''] The string to pad.\n   * @param {int} [length=0] The length to left pad the string. No changes are made if `length` is less than `subject.length`.\n   * @param {string} [pad=' '] The string to be used for padding.\n   * @return {string} Returns the left padded string.\n   * @example\n   * v.padLeft('dog', 5);\n   * // => '  dog'\n   *\n   * v.padLeft('bird', 6, '-');\n   * // => '--bird'\n   *\n   * v.padLeft('cat', 6, '-=');\n   * // => '-=-cat'\n   */\n\n\n  function padLeft(subject, length, pad) {\n    var subjectString = coerceToString(subject);\n    var lengthInt = isNil(length) ? 0 : clipNumber(toInteger(length), 0, MAX_SAFE_INTEGER);\n    var padString = coerceToString(pad, ' ');\n\n    if (lengthInt <= subjectString.length) {\n      return subjectString;\n    }\n\n    return buildPadding(padString, lengthInt - subjectString.length) + subjectString;\n  }\n  /**\n   * Pads `subject` from right to a new `length`.\n   *\n   * @function padRight\n   * @static\n   * @since 1.0.0\n   * @memberOf Manipulate\n   * @param {string} [subject=''] The string to pad.\n   * @param {int} [length=0] The length to right pad the string. No changes are made if `length` is less than `subject.length`.\n   * @param {string} [pad=' '] The string to be used for padding.\n   * @return {string} Returns the right padded string.\n   * @example\n   * v.padRight('dog', 5);\n   * // => 'dog  '\n   *\n   * v.padRight('bird', 6, '-');\n   * // => 'bird--'\n   *\n   * v.padRight('cat', 6, '-=');\n   * // => 'cat-=-'\n   */\n\n\n  function padRight(subject, length, pad) {\n    var subjectString = coerceToString(subject);\n    var lengthInt = isNil(length) ? 0 : clipNumber(toInteger(length), 0, MAX_SAFE_INTEGER);\n    var padString = coerceToString(pad, ' ');\n\n    if (lengthInt <= subjectString.length) {\n      return subjectString;\n    }\n\n    return subjectString + buildPadding(padString, lengthInt - subjectString.length);\n  }\n  /**\n   * Aligns and pads `subject` string.\n   *\n   * @ignore\n   * @param {string} subject The subject string.\n   * @param {ConversionSpecification} conversion The conversion specification object.\n   * @return {string} Returns the aligned and padded string.\n   */\n\n\n  function alignAndPad(subject, conversion) {\n    var width = conversion.width;\n\n    if (isNil(width) || subject.length >= width) {\n      return subject;\n    }\n\n    var padType = conversion.alignmentSpecifier === LITERAL_MINUS ? padRight : padLeft;\n    return padType(subject, width, conversion.getPaddingCharacter());\n  }\n  /**\n   * Add sign to the formatted number.\n   *\n   * @ignore\n   * @name addSignToFormattedNumber\n   * @param  {number} replacementNumber The number to be replaced.\n   * @param  {string} formattedReplacement The formatted version of number.\n   * @param  {ConversionSpecification} conversion The conversion specification object.\n   * @return {string} Returns the formatted number string with a sign.\n   */\n\n\n  function addSignToFormattedNumber(replacementNumber, formattedReplacement, conversion) {\n    if (conversion.signSpecifier === LITERAL_PLUS && replacementNumber >= 0) {\n      formattedReplacement = LITERAL_PLUS + formattedReplacement;\n    }\n\n    return formattedReplacement;\n  }\n  /**\n   * Formats a float type according to specifiers.\n   *\n   * @ignore\n   * @param  {string} replacement The string to be formatted.\n   * @param  {ConversionSpecification} conversion The conversion specification object.\n   * @return {string} Returns the formatted string.\n   */\n\n\n  function float(replacement, conversion) {\n    var replacementNumber = parseFloat(replacement);\n    var formattedReplacement = void 0;\n\n    if (isNaN(replacementNumber)) {\n      replacementNumber = 0;\n    }\n\n    var precision = coerceToNumber(conversion.precision, 6);\n\n    switch (conversion.typeSpecifier) {\n      case TYPE_FLOAT:\n        formattedReplacement = replacementNumber.toFixed(precision);\n        break;\n\n      case TYPE_FLOAT_SCIENTIFIC:\n        formattedReplacement = replacementNumber.toExponential(precision);\n        break;\n\n      case TYPE_FLOAT_SCIENTIFIC_UPPERCASE:\n        formattedReplacement = replacementNumber.toExponential(precision).toUpperCase();\n        break;\n\n      case TYPE_FLOAT_SHORT:\n      case TYPE_FLOAT_SHORT_UPPERCASE:\n        formattedReplacement = formatFloatAsShort(replacementNumber, precision, conversion);\n        break;\n    }\n\n    formattedReplacement = addSignToFormattedNumber(replacementNumber, formattedReplacement, conversion);\n    return coerceToString(formattedReplacement);\n  }\n  /**\n   * Formats the short float.\n   *\n   * @ignore\n   * @param  {number} replacementNumber The number to format.\n   * @param  {number} precision The precision to format the float.\n   * @param  {ConversionSpecification} conversion The conversion specification object.\n   * @return {string}  Returns the formatted short float.\n   */\n\n\n  function formatFloatAsShort(replacementNumber, precision, conversion) {\n    if (replacementNumber === 0) {\n      return '0';\n    }\n\n    var nonZeroPrecision = precision === 0 ? 1 : precision;\n    var formattedReplacement = replacementNumber.toPrecision(nonZeroPrecision).replace(REGEXP_TRAILING_ZEROS, '');\n\n    if (conversion.typeSpecifier === TYPE_FLOAT_SHORT_UPPERCASE) {\n      formattedReplacement = formattedReplacement.toUpperCase();\n    }\n\n    return formattedReplacement;\n  }\n  /**\n   * Formats an integer type according to specifiers.\n   *\n   * @ignore\n   * @param  {string} replacement The string to be formatted.\n   * @param  {ConversionSpecification} conversion The conversion specification object.\n   * @return {string} Returns the formatted string.\n   */\n\n\n  function integerBase(replacement, conversion) {\n    var integer = parseInt(replacement);\n\n    if (isNaN(integer)) {\n      integer = 0;\n    }\n\n    integer = integer >>> 0;\n\n    switch (conversion.typeSpecifier) {\n      case TYPE_INTEGER_ASCII_CHARACTER:\n        integer = String.fromCharCode(integer);\n        break;\n\n      case TYPE_INTEGER_BINARY:\n        integer = integer.toString(RADIX_BINARY);\n        break;\n\n      case TYPE_INTEGER_OCTAL:\n        integer = integer.toString(RADIX_OCTAL);\n        break;\n\n      case TYPE_INTEGER_HEXADECIMAL:\n        integer = integer.toString(RADIX_HEXADECIMAL);\n        break;\n\n      case TYPE_INTEGER_HEXADECIMAL_UPPERCASE:\n        integer = integer.toString(RADIX_HEXADECIMAL).toUpperCase();\n        break;\n    }\n\n    return coerceToString(integer);\n  }\n  /**\n   * Formats a decimal integer type according to specifiers.\n   *\n   * @ignore\n   * @param  {string} replacement The string to be formatted.\n   * @param  {ConversionSpecification} conversion The conversion specification object.\n   * @return {string} Returns the formatted string.\n   */\n\n\n  function integerDecimal(replacement, conversion) {\n    var integer = parseInt(replacement);\n\n    if (isNaN(integer)) {\n      integer = 0;\n    }\n\n    return addSignToFormattedNumber(integer, toString(integer), conversion);\n  }\n  /**\n   * Formats a string type according to specifiers.\n   *\n   * @ignore\n   * @param {string} replacement The string to be formatted.\n   * @param {ConversionSpecification} conversion The conversion specification object.\n   * @return {string} Returns the formatted string.\n   */\n\n\n  function stringFormat(replacement, conversion) {\n    var formattedReplacement = replacement;\n    var precision = conversion.precision;\n\n    if (!isNil(precision) && formattedReplacement.length > precision) {\n      formattedReplacement = truncate(formattedReplacement, precision, '');\n    }\n\n    return formattedReplacement;\n  }\n  /**\n   * Returns the computed string based on format specifiers.\n   *\n   * @ignore\n   * @name computeReplacement\n   * @param {string} replacement The replacement value.\n   * @param {ConversionSpecification} conversion The conversion specification object.\n   * @return {string} Returns the computed string.\n   */\n\n\n  function compute(replacement, conversion) {\n    var formatFunction = void 0;\n\n    switch (conversion.typeSpecifier) {\n      case TYPE_STRING:\n        formatFunction = stringFormat;\n        break;\n\n      case TYPE_INTEGER_DECIMAL:\n      case TYPE_INTEGER:\n        formatFunction = integerDecimal;\n        break;\n\n      case TYPE_INTEGER_ASCII_CHARACTER:\n      case TYPE_INTEGER_BINARY:\n      case TYPE_INTEGER_OCTAL:\n      case TYPE_INTEGER_HEXADECIMAL:\n      case TYPE_INTEGER_HEXADECIMAL_UPPERCASE:\n      case TYPE_INTEGER_UNSIGNED_DECIMAL:\n        formatFunction = integerBase;\n        break;\n\n      case TYPE_FLOAT:\n      case TYPE_FLOAT_SCIENTIFIC:\n      case TYPE_FLOAT_SCIENTIFIC_UPPERCASE:\n      case TYPE_FLOAT_SHORT:\n      case TYPE_FLOAT_SHORT_UPPERCASE:\n        formatFunction = float;\n        break;\n    }\n\n    var formattedString = formatFunction(replacement, conversion);\n    return alignAndPad(formattedString, conversion);\n  }\n  /**\n   * Construct the new conversion specification object.\n   *\n   * @ignore\n   * @param {Object} properties An object with properties to initialize.\n   * @return {ConversionSpecification} ConversionSpecification instance.\n   */\n\n\n  function ConversionSpecification(properties) {\n    /**\n     * The percent characters from conversion specification.\n     *\n     * @ignore\n     * @name ConversionSpecification#percent\n     * @type {string}\n     */\n    this.percent = properties.percent;\n    /**\n     *  The sign specifier to force a sign to be used on a number.\n     *\n     * @ignore\n     * @name ConversionSpecification#signSpecifier\n     * @type {string}\n     */\n\n    this.signSpecifier = properties.signSpecifier;\n    /**\n     * The padding specifier that says what padding character will be used.\n     *\n     * @ignore\n     * @name ConversionSpecification#paddingSpecifier\n     * @type {string}\n     */\n\n    this.paddingSpecifier = properties.paddingSpecifier;\n    /**\n     * The alignment specifier that says if the result should be left-justified or right-justified.\n     *\n     * @ignore\n     * @name ConversionSpecification#alignmentSpecifier\n     * @type {string}\n     */\n\n    this.alignmentSpecifier = properties.alignmentSpecifier;\n    /**\n     * The width specifier how many characters this conversion should result in.\n     *\n     * @ignore\n     * @name ConversionSpecification#width\n     * @type {number}\n     */\n\n    this.width = properties.width;\n    /**\n     * The precision specifier says how many decimal digits should be displayed for floating-point numbers.\n     *\n     * @ignore\n     * @name ConversionSpecification#precision\n     * @type {number}\n     */\n\n    this.precision = properties.precision;\n    /**\n     * The type specifier says what type the argument data should be treated as.\n     *\n     * @ignore\n     * @name ConversionSpecification#typeSpecifier\n     * @type {string}\n     */\n\n    this.typeSpecifier = properties.typeSpecifier;\n  }\n  /**\n   * Check if the conversion specification is a percent literal \"%%\".\n   *\n   * @ignore\n   * @return {boolean} Returns true if the conversion is a percent literal, false otherwise.\n   */\n\n\n  ConversionSpecification.prototype.isPercentLiteral = function () {\n    return LITERAL_PERCENT_SPECIFIER === this.percent;\n  };\n  /**\n   * Get the padding character from padding specifier.\n   *\n   * @ignore\n   * @returns {string} Returns the padding character.\n   */\n\n\n  ConversionSpecification.prototype.getPaddingCharacter = function () {\n    var paddingCharacter = nilDefault(this.paddingSpecifier, ' ');\n\n    if (paddingCharacter.length === 2 && paddingCharacter[0] === LITERAL_SINGLE_QUOTE) {\n      paddingCharacter = paddingCharacter[1];\n    }\n\n    return paddingCharacter;\n  };\n  /**\n   * Validates the specifier type and replacement position.\n   *\n   * @ignore\n   * @throws {Error} Throws an exception on insufficient arguments or unknown specifier.\n   * @param  {number} index The index of the matched specifier.\n   * @param  {number} replacementsLength The number of replacements.\n   * @param  {ConversionSpecification} conversion The conversion specification object.\n   * @return {undefined}\n   */\n\n\n  function validate(index, replacementsLength, conversion) {\n    if (isNil(conversion.typeSpecifier)) {\n      throw new Error('sprintf(): Unknown type specifier');\n    }\n\n    if (index > replacementsLength - 1) {\n      throw new Error('sprintf(): Too few arguments');\n    }\n\n    if (index < 0) {\n      throw new Error('sprintf(): Argument number must be greater than zero');\n    }\n  }\n  /**\n   * Return the replacement for regular expression match of the conversion specification.\n   *\n   * @ignore\n   * @name matchReplacement\n   * @param {ReplacementIndex} replacementIndex The replacement index object.\n   * @param {string[]} replacements The array of replacements.\n   * @param {string} conversionSpecification The conversion specification.\n   * @param {string} percent The percent characters from conversion specification.\n   * @param {string} position The position to insert the replacement.\n   * @param {string} signSpecifier The sign specifier to force a sign to be used on a number.\n   * @param {string} paddingSpecifier The padding specifier that says what padding character will be used.\n   * @param {string} alignmentSpecifier The alignment specifier that says if the result should be left-justified or right-justified.\n   * @param {string} widthSpecifier The width specifier how many characters this conversion should result in.\n   * @param {string} precisionSpecifier The precision specifier says how many decimal digits should be displayed for floating-point numbers.\n   * @param {string} typeSpecifier The type specifier says what type the argument data should be treated as.\n   * @return {string} Returns the computed replacement.\n   */\n\n\n  function match(replacementIndex, replacements, conversionSpecification, percent, position, signSpecifier, paddingSpecifier, alignmentSpecifier, widthSpecifier, precisionSpecifier, typeSpecifier) {\n    var conversion = new ConversionSpecification({\n      percent: percent,\n      signSpecifier: signSpecifier,\n      paddingSpecifier: paddingSpecifier,\n      alignmentSpecifier: alignmentSpecifier,\n      width: coerceToNumber(widthSpecifier, null),\n      precision: coerceToNumber(precisionSpecifier, null),\n      typeSpecifier: typeSpecifier\n    });\n\n    if (conversion.isPercentLiteral()) {\n      return conversionSpecification.slice(1);\n    }\n\n    var actualReplacementIndex = replacementIndex.getIndexByPosition(position);\n    replacementIndex.incrementOnEmptyPosition(position);\n    validate(actualReplacementIndex, replacements.length, conversion);\n    return compute(replacements[actualReplacementIndex], conversion);\n  }\n  /**\n   * Produces a string according to `format`.\n   *\n   * <div id=\"sprintf-format\" class=\"smaller\">\n   * `format` string is composed of zero or more directives: ordinary characters (not <code>%</code>), which are  copied  unchanged\n   * to  the  output string and <i>conversion specifications</i>, each of which results in fetching zero or more subsequent\n   * arguments. <br/> <br/>\n   *\n   * Each <b>conversion specification</b> is introduced by the character <code>%</code>, and ends with a <b>conversion\n   * specifier</b>. In between there may be (in this order) zero or more <b>flags</b>, an optional <b>minimum field width</b>\n   * and an optional <b>precision</b>.<br/>\n   * The syntax is: <b>ConversionSpecification</b> = <b>\"%\"</b> { <b>Flags</b> }\n   * [ <b>MinimumFieldWidth</b> ] [ <b>Precision</b> ] <b>ConversionSpecifier</b>, where curly braces { } denote repetition\n   * and square brackets [ ] optionality. <br/><br/>\n   *\n   * By default, the arguments are used in the given order.<br/>\n   * For argument numbering and swapping, `%m$` (where `m` is a number indicating the argument order)\n   * is used instead of `%` to specify explicitly which argument is taken. For instance `%1$s` fetches the 1st argument,\n   * `%2$s` the 2nd and so on, no matter what position  the conversion specification has in `format`.\n   * <br/><br/>\n   *\n   * <b>The flags</b><br/>\n   * The character <code>%</code> is followed by zero or more of the following flags:<br/>\n   * <table class=\"light-params\">\n   *   <tr>\n   *     <td><code>+</code></td>\n   *     <td>\n   *       A  sign (<code>+</code> or <code>-</code>) should always be placed before a number produced by a\n   *       signed conversion. By default a sign is used only for negative numbers.\n   *     </td>\n   *   </tr>\n   *   <tr>\n   *     <td><code>0</code></td>\n   *     <td>The value should be zero padded.</td>\n   *   </tr>\n   *   <tr>\n   *     <td><code>&blank;</code></td>\n   *     <td>(a space) The value should be space padded.</td>\n   *   </tr>\n   *   <tr>\n   *    <td><code>'</code></td>\n   *    <td>Indicates alternate padding character, specified by prefixing it with a single quote <code>'</code>.</td>\n   *   </tr>\n   *   <tr>\n   *     <td><code>-</code></td>\n   *     <td>The converted value is to be left adjusted on the field boundary (the default is right justification).</td>\n   *   </tr>\n   * </table>\n   *\n   * <b>The minimum field width</b><br/>\n   * An  optional decimal digit string (with nonzero first digit) specifying a minimum field width.  If the converted\n   * value has fewer characters than the field width, it will be padded with spaces on the left (or right, if the\n   * left-adjustment flag has been given).<br/><br/>\n   *\n   * <b>The precision</b><br/>\n   * An optional precision, in the form of a period `.` followed by an optional decimal digit string.<br/>\n   * This gives the number of digits to appear after the radix character for `e`, `E`, `f` and `F` conversions, the\n   * maximum number of significant digits for `g` and `G` conversions or the maximum number of characters to be printed\n   * from a string for `s` conversion.<br/><br/>\n   *\n   * <b>The conversion specifier</b><br/>\n   * A specifier that mentions what type the argument should be treated as:\n   *\n   * <table class=\"light-params\">\n   *   <tr>\n   *     <td>`s`</td>\n   *     <td>The string argument is treated as and presented as a string.</td>\n   *   </tr>\n   *   <tr>\n   *     <td>`d` `i`</td>\n   *     <td>The integer argument is converted to signed decimal notation.</td>\n   *   </tr>\n   *   <tr>\n   *     <td>`b`</td>\n   *     <td>The unsigned integer argument is converted to unsigned binary.</td>\n   *   </tr>\n   *   <tr>\n   *     <td>`c`</td>\n   *     <td>The unsigned integer argument is converted to an ASCII character with that number.</td>\n   *   </tr>\n   *   <tr>\n   *     <td>`o`</td>\n   *     <td>The unsigned integer argument is converted to unsigned octal.</td>\n   *   </tr>\n   *   <tr>\n   *     <td>`u`</td>\n   *     <td>The unsigned integer argument is converted to unsigned decimal.</td>\n   *   </tr>\n   *   <tr>\n   *     <td>`x` `X`</td>\n   *     <td>The unsigned integer argument is converted to unsigned hexadecimal. The letters `abcdef` are used for `x`\n   *     conversions; the letters `ABCDEF` are used for `X` conversions.</td>\n   *   </tr>\n   *   <tr>\n   *     <td>`f`</td>\n   *     <td>\n   *      The float argument is rounded and converted to decimal notation in the style `[-]ddd.ddd`, where the number of\n   *      digits after the decimal-point character is equal to the precision specification. If the precision is missing,\n   *      it is taken as 6; if the precision is explicitly zero, no decimal-point character appears.\n   *      If a decimal point appears, at least one digit appears before it.\n   *     </td>\n   *   </tr>\n   *   <tr>\n   *     <td>`e` `E`</td>\n   *     <td>\n   *       The float argument is rounded and converted in the style `[-]d.ddde±dd`, where there is one digit\n   *       before the decimal-point character and the number of digits after it is equal to the precision. If\n   *       the precision is missing, it is taken as `6`; if the precision is zero, no decimal-point character\n   *       appears. An `E` conversion uses the letter `E` (rather than `e`) to introduce the exponent.\n   *     </td>\n   *   </tr>\n   *   <tr>\n   *     <td>`g` `G`</td>\n   *     <td>\n   *       The float argument is converted in style `f` or `e` (or `F` or `E` for `G` conversions). The precision specifies\n   *       the number of significant digits. If the precision is missing, `6` digits are given; if the\n   *       precision is zero, it is treated as `1`. Style `e` is used if the exponent from its conversion is less\n   *       than `-6` or greater than or equal to the precision. Trailing zeros are removed from the fractional\n   *       part of the result; a decimal point appears only if it is followed by at least one digit.\n   *     </td>\n   *   </tr>\n   *   <tr>\n   *     <td>`%`</td>\n   *     <td>A literal `%` is written. No argument is converted. The complete conversion specification is `%%`.</td>\n   *   </tr>\n   *\n   * </table>\n   * </div>\n   *\n   * @function sprintf\n   * @static\n   * @since 1.0.0\n   * @memberOf Format\n   * @param  {string} [format=''] The format string.\n   * @param  {...*}               replacements The replacements to produce the string.\n   * @return {string}             Returns the produced string.\n   * @example\n   * v.sprintf('%s, %s!', 'Hello', 'World');\n   * // => 'Hello World!'\n   *\n   * v.sprintf('%s costs $%d', 'coffee', 2);\n   * // => 'coffee costs $2'\n   *\n   * v.sprintf('%1$s %2$s %1$s %2$s, watcha gonna %3$s', 'bad', 'boys', 'do')\n   * // => 'bad boys bad boys, watcha gonna do'\n   *\n   * v.sprintf('% 6s', 'bird');\n   * // => '  bird'\n   *\n   * v.sprintf('% -6s', 'crab');\n   * // => 'crab  '\n   *\n   * v.sprintf(\"%'*5s\", 'cat');\n   * // => '**cat'\n   *\n   * v.sprintf(\"%'*-6s\", 'duck');\n   * // => 'duck**'\n   *\n   * v.sprintf('%d %i %+d', 15, -2, 25);\n   * // => '15 -2 +25'\n   *\n   * v.sprintf(\"%06d\", 15);\n   * // => '000015'\n   *\n   * v.sprintf('0b%b 0o%o 0x%X', 12, 9, 155);\n   * // => '0b1100 0o11 0x9B'\n   *\n   * v.sprintf('%.2f', 10.469);\n   * // => '10.47'\n   *\n   * v.sprintf('%.2e %g', 100.5, 0.455);\n   * // => '1.01e+2 0.455'\n   * \n   */\n\n\n  function sprintf(format) {\n    var formatString = coerceToString(format);\n\n    if (formatString === '') {\n      return formatString;\n    }\n\n    for (var _len = arguments.length, replacements = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n      replacements[_key - 1] = arguments[_key];\n    }\n\n    var boundReplacementMatch = match.bind(undefined, new ReplacementIndex(), replacements);\n    return formatString.replace(REGEXP_CONVERSION_SPECIFICATION, boundReplacementMatch);\n  }\n\n  function _toConsumableArray(arr) {\n    if (Array.isArray(arr)) {\n      for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) {\n        arr2[i] = arr[i];\n      }\n\n      return arr2;\n    } else {\n      return Array.from(arr);\n    }\n  }\n  /**\n   * Produces a string according to `format`. Works exactly like <a href=\"#sprintf\"><code>sprintf()</code></a>,\n   * with the only difference that accepts the formatting arguments in an array `values`.<br/>\n   * See <a href=\"#sprintf-format\">here</a> `format` string specifications.\n   *\n   * @function vprintf\n   * @static\n   * @since 1.0.0\n   * @memberOf Format\n   * @param  {string} format='']  The format string.\n   * @param  {Array} replacements The array of replacements to produce the string.\n   * @return {string}             Returns the produced string.\n   * @example\n   * v.vprintf('%s', ['Welcome'])\n   * // => 'Welcome'\n   *\n   * v.vprintf('%s has %d apples', ['Alexandra', 3]);\n   * // => 'Alexandra has 3 apples'\n   */\n\n\n  function vprintf(format, replacements) {\n    return sprintf.apply(undefined, [format].concat(_toConsumableArray(nilDefault(replacements, []))));\n  }\n\n  var escapeCharactersMap = {\n    '<': '&lt;',\n    '>': '&gt;',\n    '&': '&amp;',\n    '\"': '&quot;',\n    \"'\": '&#x27;',\n    '`': '&#x60;'\n  };\n  /**\n   * Return the escaped version of `character`.\n   *\n   * @ignore\n   * @param  {string} character The character to be escape.\n   * @return {string}           The escaped version of character.\n   */\n\n  function replaceSpecialCharacter(character) {\n    return escapeCharactersMap[character];\n  }\n  /**\n   * Escapes HTML special characters  <code>< > & ' \" `</code> in <code>subject</code>.\n   *\n   * @function escapeHtml\n   * @static\n   * @since 1.0.0         \n   * @memberOf Escape\n   * @param {string} [subject=''] The string to escape.\n   * @return {string} Returns the escaped string.\n   * @example\n   * v.escapeHtml('<p>wonderful world</p>');\n   * // => '&lt;p&gt;wonderful world&lt;/p&gt;'\n   */\n\n\n  function escapeHtml(subject) {\n    return coerceToString(subject).replace(REGEXP_HTML_SPECIAL_CHARACTERS, replaceSpecialCharacter);\n  }\n  /**\n   * Escapes the regular expression special characters `- [ ] / { } ( ) * + ? . \\ ^ $ |` in `subject`.\n   *\n   * @function escapeRegExp\n   * @static\n   * @since 1.0.0\n   * @memberOf Escape\n   * @param {string} [subject=''] The string to escape.\n   * @return {string} Returns the escaped string.\n   * @example\n   * v.escapeRegExp('(hours)[minutes]{seconds}');\n   * // => '\\(hours\\)\\[minutes\\]\\{seconds\\}'\n   */\n\n\n  function escapeRegExp(subject) {\n    return coerceToString(subject).replace(REGEXP_SPECIAL_CHARACTERS, '\\\\$&');\n  }\n\n  var unescapeCharactersMap = {\n    '<': /(&lt;)|(&#x0*3c;)|(&#0*60;)/gi,\n    '>': /(&gt;)|(&#x0*3e;)|(&#0*62;)/gi,\n    '&': /(&amp;)|(&#x0*26;)|(&#0*38;)/gi,\n    '\"': /(&quot;)|(&#x0*22;)|(&#0*34;)/gi,\n    \"'\": /(&#x0*27;)|(&#0*39;)/gi,\n    '`': /(&#x0*60;)|(&#0*96;)/gi\n  };\n  var characters = Object.keys(unescapeCharactersMap);\n  /**\n   * Replaces the HTML entities with corresponding characters.\n   *\n   * @ignore\n   * @param  {string} string The accumulator string.\n   * @param  {string} key    The character.\n   * @return {string}        The string with replaced HTML entity\n   */\n\n  function reduceUnescapedString(string, key) {\n    return string.replace(unescapeCharactersMap[key], key);\n  }\n  /**\n   * Unescapes HTML special characters from <code>&amp;lt; &amp;gt; &amp;amp; &amp;quot; &amp;#x27; &amp;#x60;</code>\n   * to corresponding <code>< > & ' \" `</code> in <code>subject</code>.\n   *\n   * @function unescapeHtml\n   * @static\n   * @since 1.0.0\n   * @memberOf Escape\n   * @param  {string} [subject=''] The string to unescape.\n   * @return {string}              Returns the unescaped string.\n   * @example\n   * v.unescapeHtml('&lt;p&gt;wonderful world&lt;/p&gt;');\n   * // => '<p>wonderful world</p>'\n   */\n\n\n  function unescapeHtml(subject) {\n    var subjectString = coerceToString(subject);\n    return characters.reduce(reduceUnescapedString, subjectString);\n  }\n  /**\n   * Returns the first occurrence index of `search` in `subject`.\n   *\n   * @function indexOf\n   * @static\n   * @since 1.0.0\n   * @memberOf Index\n   * @param {string} [subject=''] The string where to search.\n   * @param {string} search The string to search.\n   * @param {number} [fromIndex=0] The index to start searching.\n   * @return {number} Returns the first occurrence index or `-1` if not found.\n   * @example\n   * v.indexOf('morning', 'n');\n   * // => 3\n   *\n   * v.indexOf('evening', 'o');\n   * // => -1\n   */\n\n\n  function indexOf(subject, search, fromIndex) {\n    var subjectString = coerceToString(subject);\n    return subjectString.indexOf(search, fromIndex);\n  }\n  /**\n   * Returns the last occurrence index of `search` in `subject`.\n   *\n   * @function lastIndexOf\n   * @static\n   * @since 1.0.0\n   * @memberOf Index\n   * @param {string} [subject=''] The string where to search.\n   * @param {string} search The string to search.\n   * @param {number} [fromIndex=subject.length - 1] The index to start searching backward in the string.\n   * @return {number} Returns the last occurrence index or `-1` if not found.\n   * @example\n   * v.lastIndexOf('morning', 'n');\n   * // => 5\n   *\n   * v.lastIndexOf('evening', 'o');\n   * // => -1\n   */\n\n\n  function lastIndexOf(subject, search, fromIndex) {\n    var subjectString = coerceToString(subject);\n    return subjectString.lastIndexOf(search, fromIndex);\n  }\n  /**\n   * Returns the first index of a `pattern` match in `subject`.\n   *\n   * @function search\n   * @static\n   * @since 1.0.0\n   * @memberOf Index\n   * @param {string} [subject=''] The string where to search.\n   * @param {string|RegExp} pattern The pattern to match. If `pattern` is not RegExp, it is transformed to `new RegExp(pattern)`.\n   * @param {number} [fromIndex=0] The index to start searching.\n   * @return {number} Returns the first match index or `-1` if not found.\n   * @example\n   * v.search('morning', /rn/);\n   * // => 2\n   *\n   * v.search('evening', '/\\d/');\n   * // => -1\n   */\n\n\n  function search(subject, pattern, fromIndex) {\n    var subjectString = coerceToString(subject);\n    var fromIndexNumber = isNil(fromIndex) ? 0 : clipNumber(toInteger(fromIndex), 0, subjectString.length);\n    var matchIndex = subjectString.substr(fromIndexNumber).search(pattern);\n\n    if (matchIndex !== -1 && !isNaN(fromIndexNumber)) {\n      matchIndex += fromIndexNumber;\n    }\n\n    return matchIndex;\n  }\n  /**\n   * Inserts into `subject` a string `toInsert` at specified `position`.\n   *\n   * @function insert\n   * @static\n   * @since 1.0.0\n   * @memberOf Manipulate\n   * @param {string} [subject=''] The string where to insert.\n   * @param {string} [toInsert=''] The string to be inserted.\n   * @param {number} [position=0] The position to insert.\n   * @return {string} Returns the string after insertion.\n   * @example\n   * v.insert('ct', 'a', 1);\n   * // => 'cat'\n   *\n   * v.insert('sunny', ' day', 5);\n   * // => 'sunny day'\n   */\n\n\n  function insert(subject, toInsert, position) {\n    var subjectString = coerceToString(subject);\n    var toInsertString = coerceToString(toInsert);\n    var positionNumber = coerceToNumber(position);\n\n    if (positionNumber < 0 || positionNumber > subjectString.length || toInsertString === '') {\n      return subjectString;\n    }\n\n    return subjectString.slice(0, positionNumber) + toInsertString + subjectString.slice(positionNumber);\n  }\n  /**\n   * Generated diacritics map. See bellow the base code.\n   * @ignore\n   * @see http://stackoverflow.com/a/18391901/1894471\n   * @type Object\n   */\n\n\n  var diacritics = {\n    \"3\": \"\\u039E\\u03BE\",\n    \"8\": \"\\u0398\\u03B8\",\n    \"A\": \"A\\xC0\\xC1\\xC2\\xC3\\xC4\\xC5\\u0100\\u0102\\u0104\\u01CD\\u01DE\\u01E0\\u01FA\\u0200\\u0202\\u0226\\u023A\\u1E00\\u1EA0\\u1EA2\\u1EA4\\u1EA6\\u1EA8\\u1EAA\\u1EAC\\u1EAE\\u1EB0\\u1EB2\\u1EB4\\u1EB6\\u24B6\\u2C6F\\uFF21\\u0386\\u0391\\u0410\",\n    \"B\": \"B\\u0181\\u0182\\u0243\\u1E02\\u1E04\\u1E06\\u24B7\\uFF22\\u0392\\u0411\",\n    \"C\": \"C\\xC7\\u0106\\u0108\\u010A\\u010C\\u0187\\u023B\\u1E08\\u24B8\\uA73E\\uFF23\\u0426\",\n    \"D\": \"D\\u010E\\u0110\\u0189\\u018A\\u018B\\u1E0A\\u1E0C\\u1E0E\\u1E10\\u1E12\\u24B9\\uA779\\uFF24\\xD0\\u0394\\u0414\",\n    \"E\": \"E\\xC8\\xC9\\xCA\\xCB\\u0112\\u0114\\u0116\\u0118\\u011A\\u018E\\u0190\\u0204\\u0206\\u0228\\u1E14\\u1E16\\u1E18\\u1E1A\\u1E1C\\u1EB8\\u1EBA\\u1EBC\\u1EBE\\u1EC0\\u1EC2\\u1EC4\\u1EC6\\u24BA\\uFF25\\u0388\\u0395\\u0415\\u042D\",\n    \"F\": \"F\\u0191\\u1E1E\\u24BB\\uA77B\\uFF26\\u03A6\\u0424\",\n    \"G\": \"G\\u011C\\u011E\\u0120\\u0122\\u0193\\u01E4\\u01E6\\u01F4\\u1E20\\u24BC\\uA77D\\uA77E\\uA7A0\\uFF27\\u0393\\u0413\\u0490\",\n    \"H\": \"H\\u0124\\u0126\\u021E\\u1E22\\u1E24\\u1E26\\u1E28\\u1E2A\\u24BD\\u2C67\\u2C75\\uA78D\\uFF28\\u0389\\u0397\\u0425\",\n    \"I\": \"I\\xCC\\xCD\\xCE\\xCF\\u0128\\u012A\\u012C\\u012E\\u0130\\u0197\\u01CF\\u0208\\u020A\\u1E2C\\u1E2E\\u1EC8\\u1ECA\\u24BE\\uFF29\\u038A\\u0399\\u03AA\\u0406\\u0418\",\n    \"J\": \"J\\u0134\\u0248\\u24BF\\uFF2A\\u0419\",\n    \"K\": \"K\\u0136\\u0198\\u01E8\\u1E30\\u1E32\\u1E34\\u24C0\\u2C69\\uA740\\uA742\\uA744\\uA7A2\\uFF2B\\u039A\\u041A\",\n    \"L\": \"L\\u0139\\u013B\\u013D\\u013F\\u0141\\u023D\\u1E36\\u1E38\\u1E3A\\u1E3C\\u24C1\\u2C60\\u2C62\\uA746\\uA748\\uA780\\uFF2C\\u039B\\u041B\",\n    \"M\": \"M\\u019C\\u1E3E\\u1E40\\u1E42\\u24C2\\u2C6E\\uFF2D\\u039C\\u041C\",\n    \"N\": \"N\\xD1\\u0143\\u0145\\u0147\\u019D\\u01F8\\u0220\\u1E44\\u1E46\\u1E48\\u1E4A\\u24C3\\uA790\\uA7A4\\uFF2E\\u039D\\u041D\",\n    \"O\": \"O\\xD2\\xD3\\xD4\\xD5\\xD6\\xD8\\u014C\\u014E\\u0150\\u0186\\u019F\\u01A0\\u01D1\\u01EA\\u01EC\\u01FE\\u020C\\u020E\\u022A\\u022C\\u022E\\u0230\\u1E4C\\u1E4E\\u1E50\\u1E52\\u1ECC\\u1ECE\\u1ED0\\u1ED2\\u1ED4\\u1ED6\\u1ED8\\u1EDA\\u1EDC\\u1EDE\\u1EE0\\u1EE2\\u24C4\\uA74A\\uA74C\\uFF2F\\u038C\\u039F\\u041E\",\n    \"P\": \"P\\u01A4\\u1E54\\u1E56\\u24C5\\u2C63\\uA750\\uA752\\uA754\\uFF30\\u03A0\\u041F\",\n    \"Q\": \"Q\\u024A\\u24C6\\uA756\\uA758\\uFF31\",\n    \"R\": \"R\\u0154\\u0156\\u0158\\u0210\\u0212\\u024C\\u1E58\\u1E5A\\u1E5C\\u1E5E\\u24C7\\u2C64\\uA75A\\uA782\\uA7A6\\uFF32\\u03A1\\u0420\",\n    \"S\": \"S\\u015A\\u015C\\u015E\\u0160\\u0218\\u1E60\\u1E62\\u1E64\\u1E66\\u1E68\\u1E9E\\u24C8\\u2C7E\\uA784\\uA7A8\\uFF33\\u03A3\\u0421\",\n    \"T\": \"T\\u0162\\u0164\\u0166\\u01AC\\u01AE\\u021A\\u023E\\u1E6A\\u1E6C\\u1E6E\\u1E70\\u24C9\\uA786\\uFF34\\u03A4\\u0422\",\n    \"U\": \"U\\xD9\\xDA\\xDB\\xDC\\u0168\\u016A\\u016C\\u016E\\u0170\\u0172\\u01AF\\u01D3\\u01D5\\u01D7\\u01D9\\u01DB\\u0214\\u0216\\u0244\\u1E72\\u1E74\\u1E76\\u1E78\\u1E7A\\u1EE4\\u1EE6\\u1EE8\\u1EEA\\u1EEC\\u1EEE\\u1EF0\\u24CA\\uFF35\\u0423\\u042A\",\n    \"V\": \"V\\u01B2\\u0245\\u1E7C\\u1E7E\\u24CB\\uA75E\\uFF36\\u0412\",\n    \"W\": \"W\\u0174\\u1E80\\u1E82\\u1E84\\u1E86\\u1E88\\u24CC\\u2C72\\uFF37\\u038F\\u03A9\",\n    \"X\": \"X\\u1E8A\\u1E8C\\u24CD\\uFF38\\u03A7\",\n    \"Y\": \"Y\\xDD\\u0176\\u0178\\u01B3\\u0232\\u024E\\u1E8E\\u1EF2\\u1EF4\\u1EF6\\u1EF8\\u1EFE\\u24CE\\uFF39\\u038E\\u03A5\\u03AB\\u042B\",\n    \"Z\": \"Z\\u0179\\u017B\\u017D\\u01B5\\u0224\\u1E90\\u1E92\\u1E94\\u24CF\\u2C6B\\u2C7F\\uA762\\uFF3A\\u0396\\u0417\",\n    \"a\": \"a\\xE0\\xE1\\xE2\\xE3\\xE4\\xE5\\u0101\\u0103\\u0105\\u01CE\\u01DF\\u01E1\\u01FB\\u0201\\u0203\\u0227\\u0250\\u1E01\\u1E9A\\u1EA1\\u1EA3\\u1EA5\\u1EA7\\u1EA9\\u1EAB\\u1EAD\\u1EAF\\u1EB1\\u1EB3\\u1EB5\\u1EB7\\u24D0\\u2C65\\uFF41\\u03AC\\u03B1\\u0430\",\n    \"b\": \"b\\u0180\\u0183\\u0253\\u1E03\\u1E05\\u1E07\\u24D1\\uFF42\\u03B2\\u0431\",\n    \"c\": \"c\\xE7\\u0107\\u0109\\u010B\\u010D\\u0188\\u023C\\u1E09\\u2184\\u24D2\\uA73F\\uFF43\\u0446\",\n    \"d\": \"d\\u010F\\u0111\\u018C\\u0256\\u0257\\u1E0B\\u1E0D\\u1E0F\\u1E11\\u1E13\\u24D3\\uA77A\\uFF44\\xF0\\u03B4\\u0434\",\n    \"e\": \"e\\xE8\\xE9\\xEA\\xEB\\u0113\\u0115\\u0117\\u0119\\u011B\\u01DD\\u0205\\u0207\\u0229\\u0247\\u025B\\u1E15\\u1E17\\u1E19\\u1E1B\\u1E1D\\u1EB9\\u1EBB\\u1EBD\\u1EBF\\u1EC1\\u1EC3\\u1EC5\\u1EC7\\u24D4\\uFF45\\u03AD\\u03B5\\u0435\\u044D\",\n    \"f\": \"f\\u0192\\u1E1F\\u24D5\\uA77C\\uFF46\\u03C6\\u0444\",\n    \"g\": \"g\\u011D\\u011F\\u0121\\u0123\\u01E5\\u01E7\\u01F5\\u0260\\u1D79\\u1E21\\u24D6\\uA77F\\uA7A1\\uFF47\\u03B3\\u0433\\u0491\",\n    \"h\": \"h\\u0125\\u0127\\u021F\\u0265\\u1E23\\u1E25\\u1E27\\u1E29\\u1E2B\\u1E96\\u24D7\\u2C68\\u2C76\\uFF48\\u03AE\\u03B7\\u0445\",\n    \"i\": \"i\\xEC\\xED\\xEE\\xEF\\u0129\\u012B\\u012D\\u012F\\u0131\\u01D0\\u0209\\u020B\\u0268\\u1E2D\\u1E2F\\u1EC9\\u1ECB\\u24D8\\uFF49\\u0390\\u03AF\\u03B9\\u03CA\\u0438\\u0456\",\n    \"j\": \"j\\u0135\\u01F0\\u0249\\u24D9\\uFF4A\\u0439\",\n    \"k\": \"k\\u0137\\u0199\\u01E9\\u1E31\\u1E33\\u1E35\\u24DA\\u2C6A\\uA741\\uA743\\uA745\\uA7A3\\uFF4B\\u03BA\\u043A\",\n    \"l\": \"l\\u013A\\u013C\\u013E\\u0140\\u0142\\u017F\\u019A\\u026B\\u1E37\\u1E39\\u1E3B\\u1E3D\\u24DB\\u2C61\\uA747\\uA749\\uA781\\uFF4C\\u03BB\\u043B\",\n    \"m\": \"m\\u026F\\u0271\\u1E3F\\u1E41\\u1E43\\u24DC\\uFF4D\\u03BC\\u043C\",\n    \"n\": \"n\\xF1\\u0144\\u0146\\u0148\\u0149\\u019E\\u01F9\\u0272\\u1E45\\u1E47\\u1E49\\u1E4B\\u24DD\\uA791\\uA7A5\\uFF4E\\u03BD\\u043D\",\n    \"o\": \"o\\xF2\\xF3\\xF4\\xF5\\xF6\\xF8\\u014D\\u014F\\u0151\\u01A1\\u01D2\\u01EB\\u01ED\\u01FF\\u020D\\u020F\\u022B\\u022D\\u022F\\u0231\\u0254\\u0275\\u1E4D\\u1E4F\\u1E51\\u1E53\\u1ECD\\u1ECF\\u1ED1\\u1ED3\\u1ED5\\u1ED7\\u1ED9\\u1EDB\\u1EDD\\u1EDF\\u1EE1\\u1EE3\\u24DE\\uA74B\\uA74D\\uFF4F\\u03BF\\u03CC\\u043E\",\n    \"p\": \"p\\u01A5\\u1D7D\\u1E55\\u1E57\\u24DF\\uA751\\uA753\\uA755\\uFF50\\u03C0\\u043F\",\n    \"q\": \"q\\u024B\\u24E0\\uA757\\uA759\\uFF51\",\n    \"r\": \"r\\u0155\\u0157\\u0159\\u0211\\u0213\\u024D\\u027D\\u1E59\\u1E5B\\u1E5D\\u1E5F\\u24E1\\uA75B\\uA783\\uA7A7\\uFF52\\u03C1\\u0440\",\n    \"s\": \"s\\xDF\\u015B\\u015D\\u015F\\u0161\\u0219\\u023F\\u1E61\\u1E63\\u1E65\\u1E67\\u1E69\\u1E9B\\u24E2\\uA785\\uA7A9\\uFF53\\u03C2\\u03C3\\u0441\",\n    \"t\": \"t\\u0163\\u0165\\u0167\\u01AD\\u021B\\u0288\\u1E6B\\u1E6D\\u1E6F\\u1E71\\u1E97\\u24E3\\u2C66\\uA787\\uFF54\\u03C4\\u0442\",\n    \"u\": \"u\\xF9\\xFA\\xFB\\xFC\\u0169\\u016B\\u016D\\u016F\\u0171\\u0173\\u01B0\\u01D4\\u01D6\\u01D8\\u01DA\\u01DC\\u0215\\u0217\\u0289\\u1E73\\u1E75\\u1E77\\u1E79\\u1E7B\\u1EE5\\u1EE7\\u1EE9\\u1EEB\\u1EED\\u1EEF\\u1EF1\\u24E4\\uFF55\\u0443\\u044A\",\n    \"v\": \"v\\u028B\\u028C\\u1E7D\\u1E7F\\u24E5\\uA75F\\uFF56\\u0432\",\n    \"w\": \"w\\u0175\\u1E81\\u1E83\\u1E85\\u1E87\\u1E89\\u1E98\\u24E6\\u2C73\\uFF57\\u03C9\\u03CE\",\n    \"x\": \"x\\u1E8B\\u1E8D\\u24E7\\uFF58\\u03C7\",\n    \"y\": \"y\\xFD\\xFF\\u0177\\u01B4\\u0233\\u024F\\u1E8F\\u1E99\\u1EF3\\u1EF5\\u1EF7\\u1EF9\\u1EFF\\u24E8\\uFF59\\u03B0\\u03C5\\u03CB\\u03CD\\u044B\",\n    \"z\": \"z\\u017A\\u017C\\u017E\\u01B6\\u0225\\u0240\\u1E91\\u1E93\\u1E95\\u24E9\\u2C6C\\uA763\\uFF5A\\u03B6\\u0437\",\n    \"OE\": \"\\x8C\\u0152\",\n    \"oe\": \"\\x9C\\u0153\",\n    \"AE\": \"\\xC6\\u01E2\\u01FC\",\n    \"ae\": \"\\xE6\\u01E3\\u01FD\",\n    \"hv\": \"\\u0195\",\n    \"OI\": \"\\u01A2\",\n    \"oi\": \"\\u01A3\",\n    \"DZ\": \"\\u01C4\\u01F1\",\n    \"Dz\": \"\\u01C5\\u01F2\",\n    \"dz\": \"\\u01C6\\u01F3\",\n    \"LJ\": \"\\u01C7\",\n    \"Lj\": \"\\u01C8\",\n    \"lj\": \"\\u01C9\",\n    \"NJ\": \"\\u01CA\",\n    \"Nj\": \"\\u01CB\",\n    \"nj\": \"\\u01CC\",\n    \"OU\": \"\\u0222\",\n    \"ou\": \"\\u0223\",\n    \"TZ\": \"\\uA728\",\n    \"tz\": \"\\uA729\",\n    \"AA\": \"\\uA732\",\n    \"aa\": \"\\uA733\",\n    \"AO\": \"\\uA734\",\n    \"ao\": \"\\uA735\",\n    \"AU\": \"\\uA736\",\n    \"au\": \"\\uA737\",\n    \"AV\": \"\\uA738\\uA73A\",\n    \"av\": \"\\uA739\\uA73B\",\n    \"AY\": \"\\uA73C\",\n    \"ay\": \"\\uA73D\",\n    \"OO\": \"\\uA74E\",\n    \"oo\": \"\\uA74F\",\n    \"VY\": \"\\uA760\",\n    \"vy\": \"\\uA761\",\n    \"TH\": \"\\xde\",\n    \"th\": \"\\xfe\",\n    \"PS\": \"\\u03A8\",\n    \"ps\": \"\\u03C8\",\n    \"Yo\": \"\\u0401\",\n    \"Ye\": \"\\u0404\",\n    \"Yi\": \"\\u0407\",\n    \"Zh\": \"\\u0416\",\n    \"Ch\": \"\\u0427\",\n    \"Sh\": \"\\u0428\\u0429\",\n    \"\": \"\\u042C\\u044C\",\n    \"Yu\": \"\\u042E\",\n    \"Ya\": \"\\u042F\",\n    \"zh\": \"\\u0436\",\n    \"ch\": \"\\u0447\",\n    \"sh\": \"\\u0448\\u0449\",\n    \"yu\": \"\\u044E\",\n    \"ya\": \"\\u044F\",\n    \"yo\": \"\\u0451\",\n    \"ye\": \"\\u0454\",\n    \"yi\": \"\\u0457\"\n  };\n  var diacriticsMap = null;\n  /**\n   * Creates a map of the diacritics.\n   *\n   * @ignore\n   * @returns {Object} Returns the diacritics map.\n   */\n\n  function getDiacriticsMap() {\n    if (diacriticsMap !== null) {\n      return diacriticsMap;\n    }\n\n    diacriticsMap = {};\n    Object.keys(diacritics).forEach(function (key) {\n      var characters = diacritics[key];\n\n      for (var index = 0; index < characters.length; index++) {\n        var character = characters[index];\n        diacriticsMap[character] = key;\n      }\n    });\n    return diacriticsMap;\n  }\n  /**\n   * Get the latin character from character with diacritics.\n   *\n   * @ignore\n   * @param   {string} character The character with diacritics.\n   * @returns {string}           Returns the character without diacritics.\n   */\n\n\n  function getLatinCharacter(character) {\n    var characterWithoutDiacritic = getDiacriticsMap()[character];\n    return characterWithoutDiacritic ? characterWithoutDiacritic : character;\n  }\n  /**\n   * Returns the `cleanCharacter` from combining marks regular expression match.\n   *\n   * @ignore\n   * @param {string} character The character with combining marks\n   * @param {string} cleanCharacter The character without combining marks.\n   * @return {string} The character without combining marks.\n   */\n\n\n  function removeCombiningMarks(character, cleanCharacter) {\n    return cleanCharacter;\n  }\n  /**\n   * Latinises the `subject` by removing diacritic characters.\n   *\n   * @function latinise\n   * @static\n   * @since 1.0.0\n   * @memberOf Manipulate\n   * @param {string} [subject=''] The string to latinise.\n   * @return {string} Returns the latinised string.\n   * @example\n   * v.latinise('cafe\\u0301'); // or 'café'\n   * // => 'cafe'\n   *\n   * v.latinise('août décembre');\n   * // => 'aout decembre'\n   *\n   * v.latinise('как прекрасен этот мир');\n   * // => 'kak prekrasen etot mir'\n   */\n\n\n  function latinise(subject) {\n    var subjectString = coerceToString(subject);\n\n    if (subjectString === '') {\n      return '';\n    }\n\n    return subjectString.replace(REGEXP_NON_LATIN, getLatinCharacter).replace(REGEXP_COMBINING_MARKS, removeCombiningMarks);\n  }\n  /**\n   * Pads `subject` to a new `length`.\n   *\n   * @function pad\n   * @static\n   * @since 1.0.0\n   * @memberOf Manipulate\n   * @param {string} [subject=''] The string to pad.\n   * @param {int} [length=0] The length to pad the string. No changes are made if `length` is less than `subject.length`.\n   * @param {string} [pad=' '] The string to be used for padding.\n   * @return {string} Returns the padded string.\n   * @example\n   * v.pad('dog', 5);\n   * // => ' dog '\n   *\n   * v.pad('bird', 6, '-');\n   * // => '-bird-'\n   *\n   * v.pad('cat', 6, '-=');\n   * // => '-cat-='\n   */\n\n\n  function pad(subject, length, pad) {\n    var subjectString = coerceToString(subject);\n    var lengthInt = isNil(length) ? 0 : clipNumber(toInteger(length), 0, MAX_SAFE_INTEGER);\n    var padString = coerceToString(pad, ' ');\n\n    if (lengthInt <= subjectString.length) {\n      return subjectString;\n    }\n\n    var paddingLength = lengthInt - subjectString.length;\n    var paddingSideLength = toInteger(paddingLength / 2);\n    var paddingSideRemainingLength = paddingLength % 2;\n    return buildPadding(padString, paddingSideLength) + subjectString + buildPadding(padString, paddingSideLength + paddingSideRemainingLength);\n  }\n  /**\n   * Replaces the matches of `pattern` with `replacement`. <br/>\n   *\n   * @function replace\n   * @static\n   * @since 1.0.0\n   * @memberOf Manipulate\n   * @param {string} [subject=''] The string to verify.\n   * @param {string|RegExp} pattern The pattern which match is replaced. If `pattern` is a string,\n   * a simple string match is evaluated and only the first occurrence replaced.\n   * @param {string|Function} replacement The string or function which invocation result replaces `pattern` match.\n   * @return {string} Returns the replacement result.\n   * @example\n   * v.replace('swan', 'wa', 'u');\n   * // => 'sun'\n   *\n   * v.replace('domestic duck', /domestic\\s/, '');\n   * // => 'duck'\n   *\n   * v.replace('nice duck', /(nice)(duck)/, function(match, nice, duck) {\n   *   return 'the ' + duck + ' is ' + nice;\n   * });\n   * // => 'the duck is nice'\n   */\n\n\n  function replace(subject, pattern, replacement) {\n    var subjectString = coerceToString(subject);\n    return subjectString.replace(pattern, replacement);\n  }\n  /**\n   * Get the flags string from a regular expression object.\n   *\n   * @ignore\n   * @param {RegExp} regExp The regular expression object.\n   * @return {string} Returns the string with flags chars.\n   */\n\n\n  function getRegExpFlags(regExp) {\n    return regExp.toString().match(REGEXP_FLAGS)[0];\n  }\n  /**\n   * Checks whether `subject` includes `search` starting from `position`.\n   *\n   * @function includes\n   * @static\n   * @since 1.0.0\n   * @memberOf Query\n   * @param {string} [subject=''] The string where to search.\n   * @param {string} search The string to search.\n   * @param {number} [position=0] The position to start searching.\n   * @return {boolean} Returns `true` if `subject` includes `search` or `false` otherwise.\n   * @example\n   * v.includes('starship', 'star');\n   * // => true\n   *\n   * v.includes('galaxy', 'g', 1);\n   * // => false\n   */\n\n\n  function includes(subject, search, position) {\n    var subjectString = coerceToString(subject);\n    var searchString = toString(search);\n\n    if (searchString === null) {\n      return false;\n    }\n\n    if (searchString === '') {\n      return true;\n    }\n\n    position = isNil(position) ? 0 : clipNumber(toInteger(position), 0, subjectString.length);\n    return subjectString.indexOf(searchString, position) !== -1;\n  }\n  /**\n   * Append flag to a regular expression.\n   *\n   * @ignore\n   * @param {RegExp} pattern The pattern to coerce.\n   * @param {string} appendFlag The flag to append to regular expression.\n   * @return {RegExp} The regular expression with added flag.\n   */\n\n\n  function appendFlagToRegExp(pattern, appendFlag) {\n    var regularExpressionFlags = getRegExpFlags(pattern);\n\n    if (!includes(regularExpressionFlags, appendFlag)) {\n      return new RegExp(pattern.source, regularExpressionFlags + appendFlag);\n    }\n\n    return pattern;\n  }\n  /**\n   * Replaces all matches of `pattern` with `replacement`. <br/>\n   *\n   * @function replaceAll\n   * @static\n   * @since 1.0.0\n   * @memberOf Manipulate\n   * @param {string} [subject=''] The string to verify.\n   * @param {string|RegExp} pattern The pattern which match is replaced. If `pattern` is a string, a simple string match is evaluated.\n   * All matches are replaced.\n   * @param {string|Function} replacement The string or function which invocation result replaces `pattern` match.\n   * @return {string} Returns the replacement result.\n   * @example\n   * v.replaceAll('good morning', 'o', '*');\n   * // => 'g**d m*rning'\n   * v.replaceAll('evening', /n/, 's');\n   * // => 'evesisg'\n   *\n   */\n\n\n  function replaceAll(subject, pattern, replacement) {\n    var subjectString = coerceToString(subject);\n    var regExp = pattern;\n\n    if (!(pattern instanceof RegExp)) {\n      regExp = new RegExp(escapeRegExp(pattern), 'g');\n    } else if (!pattern.global) {\n      regExp = appendFlagToRegExp(pattern, 'g');\n    }\n\n    return subjectString.replace(regExp, replacement);\n  }\n  /**\n   * Reverses the `subject`.\n   *\n   * @function reverse\n   * @static\n   * @since 1.0.0\n   * @memberOf Manipulate\n   * @param {string} [subject=''] The string to reverse.\n   * @return {string} Returns the reversed string.\n   * @example\n   * v.reverse('winter');\n   * // => 'retniw'\n   */\n\n\n  function reverse(subject) {\n    var subjectString = coerceToString(subject);\n    return subjectString.split('').reverse().join('');\n  }\n  /**\n   * Reverses the `subject` taking care of\n   * <a href=\"https://rainsoft.io/what-every-javascript-developer-should-know-about-unicode/#24surrogatepairs\">surrogate pairs</a> and\n   * <a href=\"https://rainsoft.io/what-every-javascript-developer-should-know-about-unicode/#25combiningmarks\">combining marks</a>.\n   *\n   * @function reverseGrapheme\n   * @static\n   * @since 1.0.0\n   * @memberOf Manipulate\n   * @param {string} [subject=''] The string to reverse.\n   * @return {string} Returns the reversed string.\n   * @example\n   * v.reverseGrapheme('summer');\n   * // => 'remmus'\n   *\n   * v.reverseGrapheme('𝌆 bar mañana mañana');\n   * // => 'anañam anañam rab 𝌆'\n   */\n\n\n  function reverseGrapheme(subject) {\n    var subjectString = coerceToString(subject);\n    /**\n     * @see https://github.com/mathiasbynens/esrever\n     */\n\n    subjectString = subjectString.replace(REGEXP_COMBINING_MARKS, function ($0, $1, $2) {\n      return reverseGrapheme($2) + $1;\n    }).replace(REGEXP_SURROGATE_PAIRS, '$2$1');\n    var reversedString = '';\n    var index = subjectString.length;\n\n    while (index--) {\n      reversedString += subjectString.charAt(index);\n    }\n\n    return reversedString;\n  }\n  /**\n   * Slugifies the `subject`. Cleans the `subject` by replacing diacritics with corresponding latin characters.\n   *\n   * @function slugify\n   * @static\n   * @since 1.0.0\n   * @memberOf Manipulate\n   * @param {string} [subject=''] The string to slugify.\n   * @return {string} Returns the slugified string.\n   * @example\n   * v.slugify('Italian cappuccino drink');\n   * // => 'italian-cappuccino-drink'\n   *\n   * v.slugify('caffé latté');\n   * // => 'caffe-latte'\n   *\n   * v.slugify('хорошая погода');\n   * // => 'horoshaya-pogoda'\n   */\n\n\n  function slugify(subject) {\n    var subjectString = coerceToString(subject);\n\n    if (subjectString === '') {\n      return '';\n    }\n\n    var cleanSubjectString = latinise(subjectString).replace(REGEXP_NON_LATIN, '-');\n    return kebabCase(cleanSubjectString);\n  }\n  /**\n   * Changes `subject` by deleting `deleteCount` of characters starting at position `start`. Places a new string\n   * `toAdd` instead of deleted characters.\n   *\n   * @function splice\n   * @static\n   * @since 1.0.0\n   * @memberOf Manipulate\n   * @param {string} [subject=''] The string where to insert.\n   * @param {string} start The position to start changing the string. For a negative position will start from the end of\n   * the string.\n   * @param {number} [deleteCount=subject.length-start] The number of characters to delete from string.\n   * @param {string} [toAdd=''] The string to be added instead of deleted characters.\n   * @return {string} Returns the modified string.\n   * @example\n   * v.splice('new year', 0, 4);\n   * // => 'year'\n   *\n   * v.splice('new year', 0, 3, 'happy');\n   * // => 'happy year'\n   *\n   * v.splice('new year', -4, 4, 'day');\n   * // => 'new day'\n   */\n\n\n  function splice(subject, start, deleteCount, toAdd) {\n    var subjectString = coerceToString(subject);\n    var toAddString = coerceToString(toAdd);\n    var startPosition = coerceToNumber(start);\n\n    if (startPosition < 0) {\n      startPosition = subjectString.length + startPosition;\n\n      if (startPosition < 0) {\n        startPosition = 0;\n      }\n    } else if (startPosition > subjectString.length) {\n      startPosition = subjectString.length;\n    }\n\n    var deleteCountNumber = coerceToNumber(deleteCount, subjectString.length - startPosition);\n\n    if (deleteCountNumber < 0) {\n      deleteCountNumber = 0;\n    }\n\n    return subjectString.slice(0, startPosition) + toAddString + subjectString.slice(startPosition + deleteCountNumber);\n  }\n\n  var _slicedToArray = function () {\n    function sliceIterator(arr, i) {\n      var _arr = [];\n      var _n = true;\n      var _d = false;\n      var _e = undefined;\n\n      try {\n        for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n          _arr.push(_s.value);\n\n          if (i && _arr.length === i) break;\n        }\n      } catch (err) {\n        _d = true;\n        _e = err;\n      } finally {\n        try {\n          if (!_n && _i[\"return\"]) _i[\"return\"]();\n        } finally {\n          if (_d) throw _e;\n        }\n      }\n\n      return _arr;\n    }\n\n    return function (arr, i) {\n      if (Array.isArray(arr)) {\n        return arr;\n      } else if (Symbol.iterator in Object(arr)) {\n        return sliceIterator(arr, i);\n      } else {\n        throw new TypeError(\"Invalid attempt to destructure non-iterable instance\");\n      }\n    };\n  }();\n  /**\n   * Translates characters or replaces substrings in `subject`.\n   *\n   * @function tr\n   * @static\n   * @since 1.3.0\n   * @memberOf Manipulate\n   * @param  {string} [subject=''] The string to translate.\n   * @param  {string|Object} from The string of characters to translate from. Or an object, then the object keys are replaced with corresponding values (longest keys are tried first).\n   * @param  {string} to The string of characters to translate to. Ignored when `from` is an object.\n   * @return {string} Returns the translated string.\n   * @example\n   * v.tr('hello', 'el', 'ip');\n   * // => 'hippo'\n   * \n   * v.tr('légèreté', 'éè', 'ee');\n   * // => 'legerete'\n   * \n   * v.tr('Yes. The fire rises.', {\n   *   'Yes': 'Awesome',\n   *   'fire': 'flame'\n   * })\n   * // => 'Awesome. The flame rises.'\n   * \n   * v.tr(':where is the birthplace of :what', {\n   *   ':where': 'Africa',\n   *   ':what': 'Humanity'\n   * });\n   * // => 'Africa is the birthplace of Humanity'\n   * \n   */\n\n\n  function tr(subject, from, to) {\n    var subjectString = coerceToString(subject);\n    var keys = void 0;\n    var values = void 0;\n\n    if (isString(from) && isString(to)) {\n      keys = from.split('');\n      values = to.split('');\n    } else {\n      var _extractKeysAndValues = extractKeysAndValues(nilDefault(from, {}));\n\n      var _extractKeysAndValues2 = _slicedToArray(_extractKeysAndValues, 2);\n\n      keys = _extractKeysAndValues2[0];\n      values = _extractKeysAndValues2[1];\n    }\n\n    var keysLength = keys.length;\n\n    if (keysLength === 0) {\n      return subjectString;\n    }\n\n    var result = '';\n    var valuesLength = values.length;\n\n    for (var index = 0; index < subjectString.length; index++) {\n      var isMatch = false;\n      var matchValue = void 0;\n\n      for (var keyIndex = 0; keyIndex < keysLength && keyIndex < valuesLength; keyIndex++) {\n        var key = keys[keyIndex];\n\n        if (subjectString.substr(index, key.length) === key) {\n          isMatch = true;\n          matchValue = values[keyIndex];\n          index = index + key.length - 1;\n          break;\n        }\n      }\n\n      result += isMatch ? matchValue : subjectString[index];\n    }\n\n    return result;\n  }\n\n  function extractKeysAndValues(object) {\n    var keys = Object.keys(object);\n    var values = keys.sort(sortStringByLength).map(function (key) {\n      return object[key];\n    });\n    return [keys, values];\n  }\n\n  function sortStringByLength(str1, str2) {\n    if (str1.length === str2.length) {\n      return 0;\n    }\n\n    return str1.length < str2.length ? 1 : -1;\n  }\n\n  var reduce$1 = Array.prototype.reduce;\n  /**\n   * Removes whitespaces from the left side of the `subject`.\n   *\n   * @function trimLeft\n   * @static\n   * @since 1.0.0\n   * @memberOf Manipulate\n   * @param {string} [subject=''] The string to trim.\n   * @param {string} [whitespace=whitespace] The whitespace characters to trim. List all characters that you want to be stripped.\n   * @return {string} Returns the trimmed string.\n   * @example\n   * v.trimLeft('  Starship Troopers');\n   * // => 'Starship Troopers'\n   *\n   * v.trimLeft('***Mobile Infantry', '*');\n   * // => 'Mobile Infantry'\n   */\n\n  function trimLeft(subject, whitespace$$1) {\n    var subjectString = coerceToString(subject);\n\n    if (whitespace$$1 === '' || subjectString === '') {\n      return subjectString;\n    }\n\n    var whitespaceString = toString(whitespace$$1);\n\n    if (isNil(whitespaceString)) {\n      return subjectString.replace(REGEXP_TRIM_LEFT, '');\n    }\n\n    var matchWhitespace = true;\n    return reduce$1.call(subjectString, function (trimmed, character) {\n      if (matchWhitespace && includes(whitespaceString, character)) {\n        return trimmed;\n      }\n\n      matchWhitespace = false;\n      return trimmed + character;\n    }, '');\n  }\n\n  var reduceRight = Array.prototype.reduceRight;\n  /**\n   * Removes whitespaces from the right side of the `subject`.\n   *\n   * @function trimRight\n   * @static\n   * @since 1.0.0\n   * @memberOf Manipulate\n   * @param {string} [subject=''] The string to trim.\n   * @param {string} [whitespace=whitespace] The whitespace characters to trim. List all characters that you want to be stripped.\n   * @return {string} Returns the trimmed string.\n   * @example\n   * v.trimRight('the fire rises   ');\n   * // => 'the fire rises'\n   *\n   * v.trimRight('do you feel in charge?!!!', '!');\n   * // => 'do you feel in charge?'\n   */\n\n  function trimRight(subject, whitespace$$1) {\n    var subjectString = coerceToString(subject);\n\n    if (whitespace$$1 === '' || subjectString === '') {\n      return subjectString;\n    }\n\n    var whitespaceString = toString(whitespace$$1);\n\n    if (isNil(whitespaceString)) {\n      return subjectString.replace(REGEXP_TRIM_RIGHT, '');\n    }\n\n    var matchWhitespace = true;\n    return reduceRight.call(subjectString, function (trimmed, character) {\n      if (matchWhitespace && includes(whitespaceString, character)) {\n        return trimmed;\n      }\n\n      matchWhitespace = false;\n      return character + trimmed;\n    }, '');\n  }\n  /**\n   * Removes whitespaces from left and right sides of the `subject`.\n   *\n   * @function trim\n   * @static\n   * @since 1.0.0\n   * @memberOf Manipulate\n   * @param {string} [subject=''] The string to trim.\n   * @param {string} [whitespace=whitespace] The whitespace characters to trim. List all characters that you want to be stripped.\n   * @return {string} Returns the trimmed string.\n   * @example\n   * v.trim(' Mother nature ');\n   * // => 'Mother nature'\n   *\n   * v.trim('--Earth--', '-');\n   * // => 'Earth'\n   */\n\n\n  function trim(subject, whitespace) {\n    var subjectString = coerceToString(subject);\n\n    if (whitespace === '' || subjectString === '') {\n      return subjectString;\n    }\n\n    var whitespaceString = toString(whitespace);\n\n    if (isNil(whitespaceString)) {\n      return subjectString.trim();\n    }\n\n    return trimRight(trimLeft(subjectString, whitespaceString), whitespaceString);\n  }\n\n  var OPTION_WIDTH = 'width';\n  var OPTION_NEW_LINE = 'newLine';\n  var OPTION_INDENT = 'indent';\n  var OPTION_CUT = 'cut';\n  /**\n   * Wraps `subject` to a given number of characters using a string break character.\n   *\n   * @function wordWrap\n   * @static\n   * @since 1.0.0\n   * @memberOf Manipulate\n   * @param  {string} [subject=''] The string to wrap.\n   * @param  {Object} [options={}] The wrap options.\n   * @param  {number} [options.width=75] The number of characters at which to wrap.\n   * @param  {string} [options.newLine='\\n'] The string to add at the end of line.\n   * @param  {string} [options.indent='']  The string to intend the line.\n   * @param  {boolean} [options.cut=false] When `false` (default) does not split the word even if word length is bigger than `width`. <br/>\n   *                                       When `true` breaks the word that has length bigger than `width`.\n   *\n   * @return {string} Returns wrapped string.\n   * @example\n   * v.wordWrap('Hello world', {\n   *   width: 5\n   * });\n   * // => 'Hello\\nworld'\n   *\n   * v.wordWrap('Hello world', {\n   *   width: 5,\n   *   newLine: '<br/>',\n   *   indent: '__'\n   * });\n   * // => '__Hello<br/>__world'\n   *\n   * v.wordWrap('Wonderful world', {\n   *   width: 5,\n   *   cut: true\n   * });\n   * // => 'Wonde\\nrful\\nworld'\n   *\n   */\n\n  function wordWrap(subject) {\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    var subjectString = coerceToString(subject);\n\n    var _determineOptions = determineOptions(options),\n        width = _determineOptions.width,\n        newLine = _determineOptions.newLine,\n        indent = _determineOptions.indent,\n        cut = _determineOptions.cut;\n\n    if (subjectString === '' || width <= 0) {\n      return indent;\n    }\n\n    var subjectLength = subjectString.length;\n    var substring = subjectString.substring.bind(subjectString);\n    var offset = 0;\n    var wrappedLine = '';\n\n    while (subjectLength - offset > width) {\n      if (subjectString[offset] === ' ') {\n        offset++;\n        continue;\n      }\n\n      var spaceToWrapAt = subjectString.lastIndexOf(' ', width + offset);\n\n      if (spaceToWrapAt >= offset) {\n        wrappedLine += indent + substring(offset, spaceToWrapAt) + newLine;\n        offset = spaceToWrapAt + 1;\n      } else {\n        if (cut) {\n          wrappedLine += indent + substring(offset, width + offset) + newLine;\n          offset += width;\n        } else {\n          spaceToWrapAt = subjectString.indexOf(' ', width + offset);\n\n          if (spaceToWrapAt >= 0) {\n            wrappedLine += indent + substring(offset, spaceToWrapAt) + newLine;\n            offset = spaceToWrapAt + 1;\n          } else {\n            wrappedLine += indent + substring(offset);\n            offset = subjectLength;\n          }\n        }\n      }\n    }\n\n    if (offset < subjectLength) {\n      wrappedLine += indent + substring(offset);\n    }\n\n    return wrappedLine;\n  }\n  /**\n   * Determine the word wrap options. The missing values are filled with defaults.\n   *\n   * @param  {Object} options  The options object.\n   * @return {Object}          The word wrap options, with default settings if necessary.\n   * @ignore\n   */\n\n\n  function determineOptions(options) {\n    return {\n      width: coerceToNumber(options[OPTION_WIDTH], 75),\n      newLine: coerceToString(options[OPTION_NEW_LINE], '\\n'),\n      indent: coerceToString(options[OPTION_INDENT], ''),\n      cut: coerceToBoolean(options[OPTION_CUT], false)\n    };\n  }\n  /**\n   * Checks whether `subject` ends with `end`.\n   *\n   * @function endsWith\n   * @static\n   * @since 1.0.0\n   * @memberOf Query\n   * @param {string} [subject=''] The string to verify.\n   * @param {string} end The ending string.\n   * @param {number} [position=subject.length] Search within `subject` as if the string were only `position` long.\n   * @return {boolean} Returns `true` if `subject` ends with `end` or `false` otherwise.\n   * @example\n   * v.endsWith('red alert', 'alert');\n   * // => true\n   *\n   * v.endsWith('metro south', 'metro');\n   * // => false\n   *\n   * v.endsWith('Murphy', 'ph', 5);\n   * // => true\n   */\n\n\n  function endsWith(subject, end, position) {\n    if (isNil(end)) {\n      return false;\n    }\n\n    var subjectString = coerceToString(subject);\n    var endString = coerceToString(end);\n\n    if (endString === '') {\n      return true;\n    }\n\n    position = isNil(position) ? subjectString.length : clipNumber(toInteger(position), 0, subjectString.length);\n    position -= endString.length;\n    var lastIndex = subjectString.indexOf(endString, position);\n    return lastIndex !== -1 && lastIndex === position;\n  }\n  /**\n   * Checks whether `subject` contains only alpha characters.\n   *\n   * @function isAlpha\n   * @static\n   * @since 1.0.0\n   * @memberOf Query\n   * @param {string} [subject=''] The string to verify.\n   * @return {boolean} Returns `true` if `subject` contains only alpha characters or `false` otherwise.\n   * @example\n   * v.isAlpha('bart');\n   * // => true\n   *\n   * v.isAlpha('lisa!');\n   * // => false\n   *\n   * v.isAlpha('lisa and bart');\n   * // => false\n   */\n\n\n  function isAlpha(subject) {\n    var subjectString = coerceToString(subject);\n    return REGEXP_ALPHA.test(subjectString);\n  }\n  /**\n   * Checks whether `subject` contains only alpha and digit characters.\n   *\n   * @function isAlphaDigit\n   * @static\n   * @since 1.0.0\n   * @memberOf Query\n   * @param {string} [subject=''] The string to verify.\n   * @return {boolean} Returns `true` if `subject` contains only alpha and digit characters or `false` otherwise.\n   * @example\n   * v.isAlphaDigit('year2020');\n   * // => true\n   *\n   * v.isAlphaDigit('1448');\n   * // => true\n   *\n   * v.isAlphaDigit('40-20');\n   * // => false\n   */\n\n\n  function isAlphaDigit(subject) {\n    var subjectString = coerceToString(subject);\n    return REGEXP_ALPHA_DIGIT.test(subjectString);\n  }\n  /**\n   * Checks whether `subject` is empty or contains only whitespaces.\n   *\n   * @function isBlank\n   * @static\n   * @since 1.0.0\n   * @memberOf Query\n   * @param {string} [subject=''] The string to verify.\n   * @return {boolean} Returns `true` if `subject` is empty or contains only whitespaces or `false` otherwise.\n   * @example\n   * v.isBlank('');\n   * // => true\n   *\n   * v.isBlank('  ');\n   * // => true\n   *\n   * v.isBlank('World');\n   * // => false\n   */\n\n\n  function isBlank(subject) {\n    var subjectString = coerceToString(subject);\n    return subjectString.trim().length === 0;\n  }\n  /**\n   * Checks whether `subject` contains only digit characters.\n   *\n   * @function isDigit\n   * @static\n   * @since 1.0.0\n   * @memberOf Query\n   * @param {string} [subject=''] The string to verify.\n   * @return {boolean} Returns `true` if `subject` contains only digit characters or `false` otherwise.\n   * @example\n   * v.isDigit('35');\n   * // => true\n   *\n   * v.isDigit('1.5');\n   * // => false\n   *\n   * v.isDigit('ten');\n   * // => false\n   */\n\n\n  function isDigit(subject) {\n    var subjectString = coerceToString(subject);\n    return REGEXP_DIGIT.test(subjectString);\n  }\n  /**\n   * Checks whether `subject` is empty.\n   *\n   * @function isEmpty\n   * @static\n   * @since 1.0.0\n   * @memberOf Query\n   * @param {string} [subject=''] The string to verify.\n   * @return {boolean} Returns `true` if `subject` is empty or `false` otherwise\n   * @example\n   * v.isEmpty('');\n   * // => true\n   *\n   * v.isEmpty('  ');\n   * // => false\n   *\n   * v.isEmpty('sun');\n   * // => false\n   */\n\n\n  function isEmpty(subject) {\n    var subjectString = coerceToString(subject);\n    return subjectString.length === 0;\n  }\n  /**\n   * Checks whether `subject` has only lower case characters.\n   *\n   * @function isLowerCase\n   * @static\n   * @since 1.0.0\n   * @memberOf Query\n   * @param {string} [subject=''] The string to verify.\n   * @return {boolean} Returns `true` if `subject` is lower case or `false` otherwise.\n   * @example\n   * v.isLowerCase('motorcycle');\n   * // => true\n   *\n   * v.isLowerCase('John');\n   * // => false\n   *\n   * v.isLowerCase('T1000');\n   * // => false\n   */\n\n\n  function isLowerCase(subject) {\n    var valueString = coerceToString(subject);\n    return isAlpha(valueString) && valueString.toLowerCase() === valueString;\n  }\n  /**\n   * Checks whether `subject` is numeric.\n   *\n   * @function isNumeric\n   * @static\n   * @since 1.0.0\n   * @memberOf Query\n   * @param {string} [subject=''] The string to verify.\n   * @return {boolean} Returns `true` if `subject` is numeric or `false` otherwise.\n   * @example\n   * v.isNumeric('350');\n   * // => true\n   *\n   * v.isNumeric('-20.5');\n   * // => true\n   *\n   * v.isNumeric('1.5E+2');\n   * // => true\n   *\n   * v.isNumeric('five');\n   * // => false\n   */\n\n\n  function isNumeric(subject) {\n    var valueNumeric = typeof subject === 'object' && !isNil(subject) ? Number(subject) : subject;\n    return (typeof valueNumeric === 'number' || typeof valueNumeric === 'string') && !isNaN(valueNumeric - parseFloat(valueNumeric));\n  }\n  /**\n   * Checks whether `subject` contains only upper case characters.\n   *\n   * @function isUpperCase\n   * @static\n   * @since 1.0.0\n   * @memberOf Query\n   * @param {string} [subject=''] The string to verify.\n   * @return {boolean} Returns `true` if `subject` is upper case or `false` otherwise.\n   * @example\n   * v.isUpperCase('ACDC');\n   * // => true\n   *\n   * v.isUpperCase('Morning');\n   * // => false\n   */\n\n\n  function isUpperCase(subject) {\n    var subjectString = coerceToString(subject);\n    return isAlpha(subjectString) && subjectString.toUpperCase() === subjectString;\n  }\n  /**\n   * Checks whether `subject` matches the regular expression `pattern`.\n   *\n   * @function matches\n   * @static\n   * @since 1.0.0\n   * @memberOf Query\n   * @param {string} [subject=''] The string to verify.\n   * @param {RegExp|string} pattern The pattern to match. If `pattern` is not RegExp, it is transformed to `new RegExp(pattern, flags)`.\n   * @param {string} [flags=''] The regular expression flags. Applies when `pattern` is string type.\n   * @return {boolean} Returns `true` if `subject` matches `pattern` or `false` otherwise.\n   * @example\n   * v.matches('pluto', /plu.{2}/);\n   * // => true\n   *\n   * v.matches('sun', 'S', 'i');\n   * // => true\n   *\n   * v.matches('apollo 11', '\\\\d{3}');\n   * // => false\n   */\n\n\n  function matches(subject, pattern, flags) {\n    var subjectString = coerceToString(subject);\n    var flagsString = coerceToString(flags);\n    var patternString = void 0;\n\n    if (!(pattern instanceof RegExp)) {\n      patternString = toString(pattern);\n\n      if (patternString === null) {\n        return false;\n      }\n\n      pattern = new RegExp(patternString, flagsString);\n    }\n\n    return pattern.test(subjectString);\n  }\n  /**\n   * Checks whether `subject` starts with `start`.\n   *\n   * @function startsWith\n   * @static\n   * @since 1.0.0\n   * @memberOf Query\n   * @param {string} [subject=''] The string to verify.\n   * @param {string} start The starting string.\n   * @param {number} [position=0] The position to start searching.\n   * @return {boolean} Returns `true` if `subject` starts with `start` or `false` otherwise.\n   * @example\n   * v.startsWith('say hello to my little friend', 'say hello');\n   * // => true\n   *\n   * v.startsWith('tony', 'on', 1);\n   * // => true\n   *\n   * v.startsWith('the world is yours', 'world');\n   * // => false\n   */\n\n\n  function startsWith(subject, start, position) {\n    var subjectString = coerceToString(subject);\n    var startString = toString(start);\n\n    if (startString === null) {\n      return false;\n    }\n\n    if (startString === '') {\n      return true;\n    }\n\n    position = isNil(position) ? 0 : clipNumber(toInteger(position), 0, subjectString.length);\n    return subjectString.substr(position, startString.length) === startString;\n  }\n  /**\n   * Splits `subject` into an array of characters.\n   *\n   * @function chars\n   * @static\n   * @since 1.0.0\n   * @memberOf Split\n   * @param {string} [subject=''] The string to split into characters.\n   * @return {Array} Returns the array of characters.\n   * @example\n   * v.chars('cloud');\n   * // => ['c', 'l', 'o', 'u', 'd']\n   */\n\n\n  function chars(subject) {\n    var subjectString = coerceToString(subject);\n    return subjectString.split('');\n  }\n  /**\n   * Returns an array of Unicode code point values from characters of `subject`.\n   *\n   * @function codePoints\n   * @static\n   * @since 1.0.0\n   * @memberOf Split\n   * @param  {string} [subject=''] The string to extract from.\n   * @return {Array} Returns an array of non-negative numbers less than or equal to `0x10FFFF`.\n   * @example\n   * v.codePoints('rain');\n   * // => [114, 97, 105, 110], or\n   * //    [0x72, 0x61, 0x69, 0x6E]\n   *\n   * v.codePoints('\\uD83D\\uDE00 smile'); // or '😀 smile'\n   * // => [128512, 32, 115, 109, 105, 108, 101], or\n   * //    [0x1F600, 0x20, 0x73, 0x6D, 0x69, 0x6C, 0x65]\n   */\n\n\n  function codePoints(subject) {\n    var subjectString = coerceToString(subject);\n    var subjectStringLength = subjectString.length;\n    var codePointArray = [];\n    var index = 0;\n    var codePointNumber = void 0;\n\n    while (index < subjectStringLength) {\n      codePointNumber = codePointAt(subjectString, index);\n      codePointArray.push(codePointNumber);\n      index += codePointNumber > 0xFFFF ? 2 : 1;\n    }\n\n    return codePointArray;\n  }\n  /**\n   * Splits `subject` into an array of graphemes taking care of\n   * <a href=\"https://rainsoft.io/what-every-javascript-developer-should-know-about-unicode/#24surrogatepairs\">surrogate pairs</a> and\n   * <a href=\"https://rainsoft.io/what-every-javascript-developer-should-know-about-unicode/#25combiningmarks\">combining marks</a>.\n   *\n   * @function graphemes\n   * @static\n   * @since 1.0.0\n   * @memberOf Split\n   * @param {string} [subject=''] The string to split into characters.\n   * @return {Array} Returns the array of graphemes.\n   * @example\n   * v.graphemes('\\uD835\\uDC00\\uD835\\uDC01'); // or '𝐀𝐁'\n   * // => ['\\uD835\\uDC00', '\\uD835\\uDC01'], or\n   * //    ['𝐀', '𝐁']\n   *\n   * v.graphemes('cafe\\u0301'); // or 'café'\n   * // => ['c', 'a', 'f', 'e\\u0301'], or\n   * //    ['c', 'a', 'f', 'é']\n   */\n\n\n  function graphemes(subject) {\n    var subjectString = coerceToString(subject);\n    return nilDefault(subjectString.match(REGEXP_UNICODE_CHARACTER), []);\n  }\n  /**\n   * Splits `subject` into an array of chunks by `separator`.\n   *\n   * @function split\n   * @static\n   * @since 1.0.0\n   * @memberOf Split\n   * @param {string} [subject=''] The string to split into characters.\n   * @param {string|RegExp} [separator] The pattern to match the separator.\n   * @param {number} [limit] Limit the number of chunks to be found.\n   * @return {Array} Returns the array of chunks.\n   * @example\n   * v.split('rage against the dying of the light', ' ');\n   * // => ['rage', 'against', 'the', 'dying', 'of', 'the', 'light']\n   *\n   * v.split('the dying of the light', /\\s/, 3);\n   * // => ['the', 'dying', 'of']\n   */\n\n\n  function split(subject, separator, limit) {\n    var subjectString = coerceToString(subject);\n    return subjectString.split(separator, limit);\n  }\n\n  var BYRE_ORDER_MARK = \"\\uFEFF\";\n  /**\n   * Strips the byte order mark (BOM) from the beginning of `subject`.\n   *\n   * @function stripBom\n   * @static\n   * @since 1.2.0\n   * @memberOf Strip\n   * @param {string} [subject=''] The string to strip from.\n   * @return {string} Returns the stripped string.\n   * @example\n   *\n   * v.stripBom('\\uFEFFsummertime sadness');\n   * // => 'summertime sadness'\n   *\n   * v.stripBom('summertime happiness');\n   * // => 'summertime happiness'\n   *\n   */\n\n  function trim$1(subject) {\n    var subjectString = coerceToString(subject);\n\n    if (subjectString === '') {\n      return '';\n    }\n\n    if (subjectString[0] === BYRE_ORDER_MARK) {\n      return subjectString.substring(1);\n    }\n\n    return subjectString;\n  }\n  /**\n   * Checks whether `subject` contains substring at specific `index`.\n   *\n   * @ignore\n   * @param {string} subject The subject to search in.\n   * @param {string} substring The substring to search/\n   * @param {number} index The index to search substring.\n   * @param {boolean} lookBehind Whether to look behind (true) or ahead (false).\n   * @return {boolean} Returns a boolean whether the substring exists.\n   */\n\n\n  function hasSubstringAtIndex(subject, substring, index) {\n    var lookBehind = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : true;\n    var indexOffset = 0;\n\n    if (lookBehind) {\n      indexOffset = -substring.length + 1;\n    }\n\n    var extractedSubstring = subject.substr(index + indexOffset, substring.length);\n    return extractedSubstring.toLowerCase() === substring;\n  }\n  /**\n   * Parses the tags from the string '<tag1><tag2>...<tagN>'.\n   *\n   * @ignore\n   * @param {string} tags The string that contains the tags.\n   * @return {string[]} Returns the array of tag names.\n   */\n\n\n  function parseTagList(tags) {\n    var tagsList = [];\n    var match = void 0;\n\n    while ((match = REGEXP_TAG_LIST.exec(tags)) !== null) {\n      tagsList.push(match[1]);\n    }\n\n    return tagsList;\n  }\n\n  var STATE_START_TAG = 0;\n  var STATE_NON_WHITESPACE = 1;\n  var STATE_DONE = 2;\n  /**\n   * Parses the tag name from html content.\n   *\n   * @ignore\n   * @param {string} tagContent The tag content.\n   * @return {string} Returns the tag name.\n   */\n\n  function parseTagName(tagContent) {\n    var state = STATE_START_TAG;\n    var tagName = '';\n    var index = 0;\n\n    while (state !== STATE_DONE) {\n      var char = tagContent[index++].toLowerCase();\n\n      switch (char) {\n        case '<':\n          break;\n\n        case '>':\n          state = STATE_DONE;\n          break;\n\n        default:\n          if (REGEXP_WHITESPACE.test(char)) {\n            if (state === STATE_NON_WHITESPACE) {\n              state = STATE_DONE;\n            }\n          } else {\n            if (state === STATE_START_TAG) {\n              state = STATE_NON_WHITESPACE;\n            }\n\n            if (char !== '/') {\n              tagName += char;\n            }\n          }\n\n          break;\n      }\n    }\n\n    return tagName;\n  }\n\n  var STATE_OUTPUT = 0;\n  var STATE_HTML = 1;\n  var STATE_EXCLAMATION = 2;\n  var STATE_COMMENT = 3;\n  /**\n   * Strips HTML tags from `subject`.\n   *\n   * @function stripTags\n   * @static\n   * @since 1.1.0\n   * @memberOf Strip\n   * @param {string} [subject=''] The string to strip from.\n   * @param {string|Array} [allowableTags] The string `'<tag1><tag2>'` or array `['tag1', 'tag2']` of tags that should not be stripped.\n   * @param {string} [replacement=''] The string to replace the stripped tag.\n   * @return {string} Returns the stripped string.\n   * @example\n   *\n   * v.stripTags('<span><a href=\"#\">Summer</a> is nice</span>');\n   * // => 'Summer is nice'\n   *\n   * v.stripTags('<span><i>Winter</i> is <b>cold</b></span>', ['b', 'i']);\n   * // => '<i>Winter</i> is <b>cold</b>'\n   *\n   * v.stripTags('Sun<br/>set', '', '-');\n   * // => 'Sun-set'\n   */\n\n  function trim$2(subject, allowableTags, replacement) {\n    subject = coerceToString(subject);\n\n    if (subject === '') {\n      return '';\n    }\n\n    if (!Array.isArray(allowableTags)) {\n      var allowableTagsString = coerceToString(allowableTags);\n      allowableTags = allowableTagsString === '' ? [] : parseTagList(allowableTagsString);\n    }\n\n    var replacementString = coerceToString(replacement);\n    var length = subject.length;\n    var hasAllowableTags = allowableTags.length > 0;\n    var hasSubstring = hasSubstringAtIndex.bind(null, subject);\n    var state = STATE_OUTPUT;\n    var depth = 0;\n    var output = '';\n    var tagContent = '';\n    var quote = null;\n\n    for (var index = 0; index < length; index++) {\n      var char = subject[index];\n      var advance = false;\n\n      switch (char) {\n        case '<':\n          if (quote) {\n            break;\n          }\n\n          if (hasSubstring('< ', index, false)) {\n            advance = true;\n            break;\n          }\n\n          if (state === STATE_OUTPUT) {\n            advance = true;\n            state = STATE_HTML;\n            break;\n          }\n\n          if (state === STATE_HTML) {\n            depth++;\n            break;\n          }\n\n          advance = true;\n          break;\n\n        case '!':\n          if (state === STATE_HTML && hasSubstring('<!', index)) {\n            state = STATE_EXCLAMATION;\n            break;\n          }\n\n          advance = true;\n          break;\n\n        case '-':\n          if (state === STATE_EXCLAMATION && hasSubstring('!--', index)) {\n            state = STATE_COMMENT;\n            break;\n          }\n\n          advance = true;\n          break;\n\n        case '\"':\n        case \"'\":\n          if (state === STATE_HTML) {\n            if (quote === char) {\n              quote = null;\n            } else if (!quote) {\n              quote = char;\n            }\n          }\n\n          advance = true;\n          break;\n\n        case 'E':\n        case 'e':\n          if (state === STATE_EXCLAMATION && hasSubstring('doctype', index)) {\n            state = STATE_HTML;\n            break;\n          }\n\n          advance = true;\n          break;\n\n        case '>':\n          if (depth > 0) {\n            depth--;\n            break;\n          }\n\n          if (quote) {\n            break;\n          }\n\n          if (state === STATE_HTML) {\n            quote = null;\n            state = STATE_OUTPUT;\n\n            if (hasAllowableTags) {\n              tagContent += '>';\n              var tagName = parseTagName(tagContent);\n\n              if (allowableTags.indexOf(tagName.toLowerCase()) !== -1) {\n                output += tagContent;\n              } else {\n                output += replacementString;\n              }\n\n              tagContent = '';\n            } else {\n              output += replacementString;\n            }\n\n            break;\n          }\n\n          if (state === STATE_EXCLAMATION || state === STATE_COMMENT && hasSubstring('-->', index)) {\n            quote = null;\n            state = STATE_OUTPUT;\n            tagContent = '';\n            break;\n          }\n\n          advance = true;\n          break;\n\n        default:\n          advance = true;\n      }\n\n      if (advance) {\n        switch (state) {\n          case STATE_OUTPUT:\n            output += char;\n            break;\n\n          case STATE_HTML:\n            if (hasAllowableTags) {\n              tagContent += char;\n            }\n\n            break;\n        }\n      }\n    }\n\n    return output;\n  }\n\n  var globalObject$1 = null;\n\n  function getGlobalObject() {\n    if (globalObject$1 !== null) {\n      return globalObject$1;\n    }\n    /* istanbul ignore next */\n    // It's hard to mock the global variables. This code surely works fine. I hope :)\n\n\n    if (typeof global === 'object' && global.Object === Object) {\n      // NodeJS global object\n      globalObject$1 = global;\n    } else if (typeof self === 'object' && self.Object === Object) {\n      // self property from Window object\n      globalObject$1 = self;\n    } else {\n      // Other cases. Function constructor always has the context as global object\n      globalObject$1 = new Function('return this')();\n    }\n\n    return globalObject$1;\n  }\n\n  var globalObject = getGlobalObject();\n  var previousV = globalObject.v;\n  /**\n   * Restores `v` variable to previous value and returns Voca library instance.\n   *\n   * @function noConflict\n   * @static\n   * @since 1.0.0\n   * @memberOf Util\n   * @return {Object} Returns Voca library instance.\n   * @example\n   * var voca = v.noConflict();\n   * voca.isAlpha('Hello');\n   * // => true\n   */\n\n  function noConflict() {\n    if (this === globalObject.v) {\n      globalObject.v = previousV;\n    }\n\n    return this;\n  }\n  /**\n   * A property that contains the library <a href=\"http://semver.org/\">semantic version number</a>.\n   * @name version\n   * @static\n   * @since 1.0.0\n   * @memberOf Util\n   * @type string\n   * @example\n   * v.version\n   * // => '1.4.0'\n   */\n\n\n  var version = '1.4.0';\n  /* eslint sort-imports: \"off\" */\n\n  /**\n   * Functions to change the case\n   * @namespace Case\n   */\n\n  /**\n   * Chain functions\n   * @namespace Chain\n   */\n\n  /**\n   * Functions to cut a string\n   * @namespace Chop\n   */\n\n  /**\n   * Functions to count characters in a string\n   * @namespace Count\n   */\n\n  /**\n   * Functions to format\n   * @namespace Format\n   */\n\n  /**\n   * Functions to escape RegExp special characters\n   * @namespace Escape\n   */\n\n  /**\n   * Functions to find index\n   * @namespace Index\n   */\n\n  /**\n   * Functions to manipulate a string\n   * @namespace Manipulate\n   */\n\n  /**\n   * Functions to query a string\n   * @namespace Query\n   */\n\n  /**\n   * Functions to split a string\n   * @namespace Split\n   */\n\n  /**\n   * Functions to strip a string\n   * @namespace Strip\n   */\n\n  /**\n   * Util functions and properties\n   * @namespace Util\n   */\n\n  var functions = {\n    camelCase: camelCase,\n    capitalize: capitalize,\n    decapitalize: decapitalize,\n    kebabCase: kebabCase,\n    lowerCase: lowerCase,\n    snakeCase: snakeCase,\n    swapCase: swapCase,\n    titleCase: titleCase,\n    upperCase: upperCase,\n    count: count,\n    countGraphemes: countGrapheme,\n    countSubstrings: countSubstrings,\n    countWhere: countWhere,\n    countWords: countWords,\n    escapeHtml: escapeHtml,\n    escapeRegExp: escapeRegExp,\n    unescapeHtml: unescapeHtml,\n    sprintf: sprintf,\n    vprintf: vprintf,\n    indexOf: indexOf,\n    lastIndexOf: lastIndexOf,\n    search: search,\n    charAt: charAt,\n    codePointAt: codePointAt,\n    first: first,\n    graphemeAt: graphemeAt,\n    last: last,\n    prune: prune,\n    slice: slice,\n    substr: substr,\n    substring: substring,\n    truncate: truncate,\n    insert: insert,\n    latinise: latinise,\n    pad: pad,\n    padLeft: padLeft,\n    padRight: padRight,\n    repeat: repeat,\n    replace: replace,\n    replaceAll: replaceAll,\n    reverse: reverse,\n    reverseGrapheme: reverseGrapheme,\n    slugify: slugify,\n    splice: splice,\n    tr: tr,\n    trim: trim,\n    trimLeft: trimLeft,\n    trimRight: trimRight,\n    wordWrap: wordWrap,\n    endsWith: endsWith,\n    includes: includes,\n    isAlpha: isAlpha,\n    isAlphaDigit: isAlphaDigit,\n    isBlank: isBlank,\n    isDigit: isDigit,\n    isEmpty: isEmpty,\n    isLowerCase: isLowerCase,\n    isNumeric: isNumeric,\n    isString: isString,\n    isUpperCase: isUpperCase,\n    matches: matches,\n    startsWith: startsWith,\n    chars: chars,\n    codePoints: codePoints,\n    graphemes: graphemes,\n    split: split,\n    words: words,\n    stripBom: trim$1,\n    stripTags: trim$2,\n    noConflict: noConflict,\n    version: version\n  };\n  /**\n   * The chain wrapper constructor.\n   *\n   * @ignore\n   * @param  {string}       subject               The string to be wrapped.\n   * @param  {boolean}      [explicitChain=false] A boolean that indicates if the chain sequence is explicit or implicit.\n   * @return {ChainWrapper}                       Returns a new instance of `ChainWrapper`\n   * @constructor\n   */\n\n  function ChainWrapper(subject, explicitChain) {\n    this._wrappedValue = subject;\n    this._explicitChain = explicitChain;\n  }\n  /**\n   * Unwraps the chain sequence wrapped value.\n   *\n   * @memberof Chain\n   * @since 1.0.0\n   * @function __proto__value\n   * @return {*} Returns the unwrapped value.\n   * @example\n   * v\n   *  .chain('Hello world')\n   *  .replace('Hello', 'Hi')\n   *  .lowerCase()\n   *  .slugify()\n   *  .value()\n   * // => 'hi-world'\n   *\n   * v(' Space travel ')\n   *  .trim()\n   *  .truncate(8)\n   *  .value()\n   * // => 'Space...'\n   */\n\n\n  ChainWrapper.prototype.value = function () {\n    return this._wrappedValue;\n  };\n  /**\n   * Override the default object valueOf().\n   *\n   * @ignore\n   * @return {*} Returns the wrapped value.\n   */\n\n\n  ChainWrapper.prototype.valueOf = function () {\n    return this.value();\n  };\n  /**\n   * Returns the wrapped value to be used in JSON.stringify().\n   *\n   * @ignore\n   * @return {*} Returns the wrapped value.\n   */\n\n\n  ChainWrapper.prototype.toJSON = function () {\n    return this.value();\n  };\n  /**\n   * Returns the string representation of the wrapped value.\n   *\n   * @ignore\n   * @return {string} Returns the string representation.\n   */\n\n\n  ChainWrapper.prototype.toString = function () {\n    return String(this.value());\n  };\n  /**\n   * Creates a new chain object that enables <i>explicit</i> chain sequences.\n   * Use `v.prototype.value()` to unwrap the result. <br/>\n   * Does not modify the wrapped value.\n   *\n   * @memberof Chain\n   * @since 1.0.0\n   * @function __proto__chain\n   * @return {Object} Returns the wrapper in <i>explicit</i> mode.\n   * @example\n   * v('Back to School')\n   *  .chain()\n   *  .lowerCase()\n   *  .words()\n   *  .value()\n   * // => ['back', 'to', 'school']\n   *\n   * v(\" Back to School \")\n   *  .chain()\n   *  .trim()\n   *  .truncate(7)\n   *  .value()\n   * // => 'Back...'\n   */\n\n\n  ChainWrapper.prototype.chain = function () {\n    return new ChainWrapper(this._wrappedValue, true);\n  };\n  /**\n   * Modifies the wrapped value with the invocation result of `changer` function. The current wrapped value is the\n   * argument of `changer` invocation.\n   *\n   * @memberof Chain\n   * @since 1.0.0\n   * @function __proto__thru\n   * @param  {Function} changer The function to invoke.\n   * @return {Object}           Returns the new wrapper that wraps the invocation result of `changer`.\n   * @example\n   * v\n   *  .chain('sun is shining')\n   *  .words()\n   *  .thru(function(words) {\n   *    return words[0];\n   *  })\n   *  .value()\n   * // => 'sun'\n   *\n   */\n\n\n  ChainWrapper.prototype.thru = function (changer) {\n    if (typeof changer === 'function') {\n      return new ChainWrapper(changer(this._wrappedValue), this._explicitChain);\n    }\n\n    return this;\n  };\n  /**\n   * A boolean that indicates if the chain sequence is explicit or implicit.\n   * @ignore\n   * @type {boolean}\n   * @private\n   */\n\n\n  ChainWrapper.prototype._explicitChain = true;\n  /**\n   * Make a voca function chainable.\n   *\n   * @ignore\n   * @param  {Function} functionInstance The function to make chainable\n   * @return {Function}                  Returns the chainable function\n   */\n\n  function makeFunctionChainable(functionInstance) {\n    return function () {\n      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n\n      var result = functionInstance.apply(undefined, [this._wrappedValue].concat(args));\n\n      if (this._explicitChain || typeof result === 'string') {\n        return new ChainWrapper(result, this._explicitChain);\n      } else {\n        return result;\n      }\n    };\n  }\n\n  Object.keys(functions).forEach(function (name) {\n    ChainWrapper.prototype[name] = makeFunctionChainable(functions[name]);\n  });\n  /**\n   * Creates a chain object that wraps `subject`, enabling <i>explicit</i> chain sequences. <br/>\n   * Use `v.prototype.value()` to unwrap the result.\n   *\n   * @memberOf Chain\n   * @since 1.0.0\n   * @function chain\n   * @param  {string} subject The string to wrap.\n   * @return {Object}         Returns the new wrapper object.\n   * @example\n   * v\n   *  .chain('Back to School')\n   *  .lowerCase()\n   *  .words()\n   *  .value()\n   * // => ['back', 'to', 'school']\n   */\n\n  function chain(subject) {\n    return new ChainWrapper(subject, true);\n  }\n\n  var _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n  /**\n   * Creates a chain object that wraps `subject`, enabling <i>implicit</i> chain sequences.<br/>\n   * A function that returns `number`, `boolean` or `array` type <i>terminates</i> the chain sequence and returns the unwrapped value.\n   * Otherwise use `v.prototype.value()` to unwrap the result.\n   *\n   * @memberOf Chain\n   * @since 1.0.0\n   * @function v\n   * @param {string} subject The string to wrap.\n   * @return {Object}  Returns the new wrapper object.\n   * @example\n   * v('Back to School')\n   *  .lowerCase()\n   *  .words()\n   * // => ['back', 'to', 'school']\n   *\n   * v(\" Back to School \")\n   *  .trim()\n   *  .truncate(7)\n   *  .value()\n   * // => 'Back...'\n   */\n\n\n  function Voca(subject) {\n    return new ChainWrapper(subject, false);\n  }\n\n  _extends(Voca, functions, {\n    chain: chain\n  });\n\n  return Voca;\n});","import React from 'react'\nimport { Helmet } from 'react-helmet'\nimport { getSrc } from 'gatsby-plugin-image'\nimport { titleCase } from 'voca'\n\nclass SEO extends React.Component {\n  constructor(props) {\n    super(props)\n  }\n\n  getBreadcrumbsFromLocation(location) {\n    if (location.pathname === '/') return\n    const splitLocation = location.pathname.split('/')\n    const breadcrumbObj = {\n      '@context': 'https://schema.org',\n      '@type': 'BreadcrumbList',\n      itemListElement: [],\n    }\n    splitLocation.forEach((element, index) => {\n      let pathnameBuild = ''\n\n      if (element !== '') {\n        pathnameBuild = `${pathnameBuild}/${element}`\n        breadcrumbObj.itemListElement.push({\n          '@type': 'ListItem',\n          position: index,\n          item: {\n            '@id': `${location.origin}/${pathnameBuild}`,\n            name: titleCase(element.replace(/\\-/g, ' ')),\n          },\n        })\n      }\n    })\n\n    return breadcrumbObj\n  }\n\n  render() {\n    const {\n      postNode,\n      pagePath,\n      postSEO,\n      pageSEO,\n      articleSEO,\n      customTitle,\n      siteMetadata,\n      location,\n    } = this.props\n    const siteImage = `${siteMetadata.siteUrl}${siteMetadata.shareImage}`\n    let title\n    let description\n    let image\n    let imgWidth\n    let imgHeight\n    let pageUrl\n    let dateModified = new Date()\n    let keywords = [postNode.title].concat(postNode.tags)\n\n    // Set Default OpenGraph Parameters for Fallback\n    title = siteMetadata.title\n    description = siteMetadata.description\n    image = `${siteMetadata.siteUrl}${siteMetadata.shareImage}`\n    imgWidth = siteMetadata.shareImageWidth\n    imgHeight = siteMetadata.shareImageHeight\n    pageUrl = siteMetadata.siteUrl\n\n    const breadcrumbJson = this.getBreadcrumbsFromLocation(location)\n\n    if (customTitle) {\n      title = postNode.title\n      pageUrl = siteMetadata.siteUrl + '/' + pagePath + '/'\n    }\n\n    // Replace with Page Parameters if post or page\n    if (postSEO || pageSEO) {\n      title = postNode.title\n      description = postNode.description.internal.content.split('\\n')[0]\n      if (pagePath.length > 1) {\n        pageUrl = siteMetadata.siteUrl + '/' + pagePath + '/'\n      } else {\n        pageUrl = siteMetadata.siteUrl + '/'\n      }\n    }\n    // Use Hero Image for OpenGraph\n    if (postSEO || articleSEO) {\n      image = `https:${getSrc(postNode.heroImage.gatsbyImageData)}`\n      imgWidth = postNode.heroImage.gatsbyImageData.width\n      imgHeight = postNode.heroImage.gatsbyImageData.height\n      dateModified = postNode.publishDate\n      pageUrl = `${siteMetadata.siteUrl}/${pagePath}/`\n    }\n\n    // Default Website Schema\n    const schemaOrgJSONLD = [\n      {\n        '@context': 'http://schema.org',\n        '@type': 'WebSite',\n        url: siteMetadata.siteUrl,\n        name: siteMetadata.title,\n        alternateName: siteMetadata.title,\n        potentialAction: {\n          '@type': 'SearchAction',\n          target: 'https://looparch.com/search/?s={search_term_string}',\n          'query-input': 'required name=search_term_string',\n        },\n      },\n      {\n        '@context': 'http://schema.org',\n        '@type': 'Organization',\n        name: siteMetadata.title,\n        legalName: `${siteMetadata.title}, LLC`,\n        url: siteMetadata.siteUrl,\n        logo: siteImage,\n        foundingDate: '2009',\n        address: {\n          '@type': 'PostalAddress',\n          streetAddress: '3110 N 16th Street',\n          addressLocality: 'Phoenix',\n          addressRegion: 'AZ',\n          postalCode: '85016',\n          addressCountry: 'USA',\n        },\n        contactPoint: {\n          '@type': 'ContactPoint',\n          contactType: 'sales',\n          email: 'info@looparch.com',\n          url: `${siteMetadata.siteUrl}/contact/`,\n        },\n        sameAs: [\n          'https://www.instagram.com/looparchitecturalmaterials/',\n          'https://www.facebook.com/looparch/',\n        ],\n      },\n      {\n        '@context': 'http://schema.org',\n        '@type': 'LocalBusiness',\n        address: {\n          '@type': 'PostalAddress',\n          streetAddress: '3110 N 16th Street',\n          addressLocality: 'Phoenix',\n          addressRegion: 'AZ',\n          postalCode: '85016',\n          addressCountry: 'USA',\n        },\n        telephone: '602-810-1502',\n        image: siteImage,\n        priceRange: '$$$',\n        description: `${siteMetadata.description}`,\n        name: siteMetadata.title,\n        openingHours: 'Mo,Tu,We,Th,Fr 09:00-17:00',\n        geo: {\n          '@type': 'GeoCoordinates',\n          latitude: '33.484319',\n          longitude: '-112.047970',\n        },\n        sameAs: [\n          'https://www.instagram.com/looparchitecturalmaterials/',\n          'https://www.facebook.com/looparch/',\n          'https://www.pinterest.com/looparchitecturalmaterials',\n        ],\n      },\n      breadcrumbJson,\n    ]\n\n    // Blog Post Schema\n    if (postSEO) {\n      schemaOrgJSONLD.push({\n        '@context': 'http://schema.org',\n        '@type': 'NewsArticle',\n        mainEntityOfPage: {\n          '@type': 'WebPage',\n          url: pageUrl,\n        },\n        headline: title,\n        image: [image],\n        datePublished: postNode.publishDate,\n        dateModified: dateModified,\n        author: {\n          '@type': 'Person',\n          name: siteMetadata.publisher,\n          url: siteMetadata.siteUrl,\n        },\n        publisher: {\n          '@type': 'Organization',\n          name: siteMetadata.publisher,\n          url: siteMetadata.siteUrl,\n          logo: {\n            '@type': 'ImageObject',\n            name: 'Loop Architectural Materials Logo',\n            width: `600`,\n            height: `60`,\n            url: `${siteMetadata.siteUrl}${siteMetadata.shareImage}`,\n          },\n        },\n        description: postNode.description.childMarkdownRemark.html,\n      })\n    }\n\n    // Page SEO Schema\n    if (pageSEO) {\n      schemaOrgJSONLD.push({\n        '@context': 'http://schema.org',\n        '@type': 'WebPage',\n        url: location.href,\n        name: title,\n        description: description,\n      })\n    }\n\n    return (\n      <Helmet>\n        {/* General tags */}\n        <meta name=\"keywords\" content={keywords.join(',')} />\n        <meta name=\"image\" content={image} />\n        <meta name=\"description\" content={description} />\n        <meta name=\"application-name\" content=\"Loop Architectural Materials\" />\n\n        {/* Schema.org tags */}\n        <script type=\"application/ld+json\">\n          {JSON.stringify(schemaOrgJSONLD)}\n        </script>\n\n        <script\n          async\n          src=\"https://chimpstatic.com/mcjs-connected/js/users/6236ae131b11b8506326eed86/943d564cd0b36996e264a468a.js\"\n        ></script>\n\n        {/* OpenGraph tags */}\n        <meta property=\"og:title\" content={title} />\n        {postSEO ? (\n          <meta property=\"og:type\" content=\"article\" />\n        ) : (\n          <meta property=\"og:type\" content=\"article\" />\n        )}\n        <meta\n          property=\"article:author\"\n          content=\"Loop Architectural Materials\"\n        />\n        <meta\n          property=\"article:published_time\"\n          content={postNode.publishDate}\n        />\n        <meta property=\"og:url\" content={pageUrl} />\n        <meta property=\"og:image\" content={image} />\n        <meta property=\"og:image:width\" content={imgWidth} />\n        <meta property=\"og:image:height\" content={imgHeight} />\n        <meta property=\"og:description\" content={description} />\n\n        {/* Twitter Card tags */}\n        <meta name=\"twitter:card\" content=\"summary_large_image\" />\n        <meta\n          name=\"twitter:creator\"\n          content={siteMetadata.userTwitter ? siteMetadata.userTwitter : ''}\n        />\n        <meta name=\"twitter:title\" content={title} />\n        <meta name=\"twitter:image\" content={image} />\n        <meta name=\"twitter:description\" content={description} />\n      </Helmet>\n    )\n  }\n}\n\nexport default SEO\n"],"sourceRoot":""}