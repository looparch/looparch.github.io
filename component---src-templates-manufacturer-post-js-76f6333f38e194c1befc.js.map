{"version":3,"sources":["webpack://loop-gatsby/./src/components/MdProductPreview/MdProductPreview.js","webpack://loop-gatsby/./src/components/MdProductPreview/index.js","webpack://loop-gatsby/./src/templates/ManufacturerPost.js"],"names":["MdProductPreview","props","render","product","this","post","description","title","VariableImage","G","image","image_primary","childImageSharp","gatsbyImageData","alt","className","id","Link","to","slug","hrefLang","rel","style","position","React","defaultProps","groupedProducts","data","allMarkdownRemark","localProductGroups","slice","uniqueProductGroups","map","productGroup","groupName","titleCase","fieldValue","replace","push","name","anchor","Set","state","windowHeight","productGroups","scrollToId","e","stopPropagation","el","document","getElementById","window","scrollTo","offsetLeft","offsetTop","offsetHeight","siteMetadata","site","siteTitle","contentfulManufacturer","manufacturers","allContentfulManufacturer","edges","Layout","Helmet","Seo","pageSEO","pagePath","postNode","location","logoImageDark","heroImage","dangerouslySetInnerHTML","__html","childMarkdownRemark","html","href","url","target","onClick","node","iterator","key","top","background","zIndex","display","nodes","fm","frontmatter","path","pathname","padding","FormContact","section","recaptchaKey"],"mappings":"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","file":"component---src-templates-manufacturer-post-js-76f6333f38e194c1befc.js","sourcesContent":["import React from 'react'\nimport PropTypes from 'prop-types'\n\nimport { Link } from 'gatsby'\nimport { GatsbyImage } from 'gatsby-plugin-image'\nclass MdProductPreview extends React.Component {\n  constructor(props) {\n    super(props)\n  }\n\n  render() {\n    const product = this.props.product\n    const post = this.props.post\n    const description = product.description || product.title\n\n    const VariableImage = (\n      <GatsbyImage\n        image={product.image_primary.childImageSharp.gatsbyImageData}\n        alt={description}\n        title={`${post.title} ${product.title}`}\n        className={`image product-preview-image fluid`}\n      />\n    )\n\n    return (\n      <article className={`product-preview card`} id={product.title}>\n        <Link to={product.slug} hrefLang=\"en\" rel=\"help\">\n          <div className=\"card-image\">{VariableImage}</div>\n          <div className=\"card-content\">\n            <div className=\"media-content\" style={{ position: 'absolute' }}>\n              <h3 className=\"is-size-6\">{product.title}</h3>\n            </div>\n          </div>\n        </Link>\n      </article>\n    )\n  }\n}\n\nMdProductPreview.propTypes = {\n  product: PropTypes.object.isRequired,\n  post: PropTypes.object.isRequired,\n}\n\nMdProductPreview.defaultProps = {\n  product: {},\n  post: {},\n}\n\nexport default MdProductPreview\n","import MdProductPreview from \"./MdProductPreview\"\n\nexport default MdProductPreview\n","import React from 'react'\nimport { Helmet } from 'react-helmet'\nimport { GatsbyImage } from 'gatsby-plugin-image'\nimport { graphql, Link } from 'gatsby'\nimport titleCase from 'voca/title_case'\n\nimport MdProductPreview from '../components/MdProductPreview'\nimport FormContact from '../components/FormContact'\nimport Layout from '../components/Layout'\nimport Seo from '../components/Seo'\n\nclass ManufacturerPostTemplate extends React.Component {\n  constructor(props) {\n    super(props)\n\n    const groupedProducts = this.props.data.allMarkdownRemark.groupedProducts\n    const firstGroup = groupedProducts.slice(0, 1)\n    let localProductGroups = []\n    let uniqueProductGroups = []\n    groupedProducts.map((productGroup) => {\n      const groupName = titleCase(productGroup.fieldValue.replace(/\\-/g, ' '))\n\n      localProductGroups.push({\n        name: groupName,\n        anchor: productGroup.fieldValue,\n      })\n      uniqueProductGroups = [...new Set(localProductGroups)]\n    })\n    this.state = {\n      windowHeight: 1000,\n      productGroups: uniqueProductGroups,\n      groupedProducts,\n    }\n  }\n\n  scrollToId(id, e) {\n    e.stopPropagation()\n    const el = document.getElementById(id)\n    window.scrollTo(el.offsetLeft, el.offsetTop + el.offsetHeight)\n  }\n\n  render() {\n    const siteMetadata = this.props.data.site.siteMetadata\n    const siteTitle = siteMetadata.title\n    const post = this.props.data.contentfulManufacturer\n    const groupedProducts =\n      this.props.data.allMarkdownRemark.groupedProducts || []\n    const manufacturers = this.props.data.allContentfulManufacturer || {\n      edges: [],\n    }\n\n    return (\n      <Layout>\n        <Helmet title={`${post.title} | ${siteTitle}`} />\n        <Seo\n          pageSEO\n          pagePath={`manufacturers/${post.slug}`}\n          siteMetadata={siteMetadata}\n          postNode={post}\n          location={this.props.location}\n        />\n\n        <h1 className=\"is-sr-only\">{`${post.title} | ${siteTitle}`}</h1>\n        <section className=\"section\" id=\"manufacturer-post\">\n          <div className=\"container\">\n            <div className=\"columns is-multiline is-variable is-6\">\n              <div className=\"column is-one-third\">\n                <GatsbyImage\n                  image={post.logoImageDark.gatsbyImageData}\n                  alt={post.logoImageDark.title}\n                  title={post.logoImageDark.title}\n                  className=\"image\"\n                />\n                <br />\n                <br />\n                <GatsbyImage\n                  image={post.heroImage.gatsbyImageData}\n                  alt={post.heroImage.title}\n                  title={post.heroImage.title}\n                  className=\"image\"\n                />\n                <br />\n                <br />\n                <div\n                  className=\"content\"\n                  dangerouslySetInnerHTML={{\n                    __html: post.description.childMarkdownRemark.html,\n                  }}\n                />\n                <div className=\"content\">\n                  <div className=\"field is-grouped\">\n                    <p className=\"control no-print\">\n                      <a\n                        href={post.url}\n                        target=\"_blank\"\n                        className=\"button is-primary\"\n                        rel=\"noopener\"\n                      >\n                        <span>Visit {post.title}</span>\n                      </a>\n                    </p>\n                    <p className=\"control no-print\">\n                      <Link\n                        to=\"#inquiry\"\n                        className=\"button is-secondary\"\n                        onClick={(e) => this.scrollToId('inquiry', e)}\n                      >\n                        <span>Inquire</span>\n                      </Link>\n                    </p>\n                  </div>\n                  <br />\n                  <div className=\"tags\">\n                    {this.state.productGroups.map((node, iterator) => {\n                      return (\n                        <span className=\"tag\" key={iterator}>\n                          <Link\n                            to={`#${node.anchor}`}\n                            onClick={(e) => this.scrollToId(node.anchor, e)}\n                          >\n                            {node.name}\n                          </Link>\n                        </span>\n                      )\n                    })}\n                  </div>\n                </div>\n              </div>\n              <div className=\"column is-marginless is-paddingless\">\n                {this.state.groupedProducts.map((productGroup, iterator) => {\n                  const groupName = titleCase(\n                    productGroup.fieldValue.replace(/\\-/g, ' ')\n                  )\n                  return (\n                    <div key={iterator}>\n                      <div\n                        id={productGroup.fieldValue}\n                        className=\"column is-full is-marginless\"\n                        style={{\n                          position: 'sticky',\n                          top: '65px',\n                          background: '#FFF',\n                          zIndex: '25',\n                          display: 'block',\n                        }}\n                      >\n                        <h2\n                          className=\"title is-size-4\"\n                          style={{\n                            background: '#FFF',\n                            display: 'block',\n                          }}\n                        >\n                          {groupName}\n                        </h2>\n                      </div>\n                      {productGroup.nodes.map((product) => {\n                        const fm = product.frontmatter\n                        return (\n                          <div\n                            key={product.id}\n                            className=\"column is-inline-block is-one-third-desktop is-half-tablet is-half-mobile\"\n                            style={{ zIndex: '500' }}\n                          >\n                            <MdProductPreview\n                              product={fm}\n                              post={post}\n                              siteMetadata={siteMetadata}\n                              path={this.props.location.pathname}\n                            />\n                          </div>\n                        )\n                      })}\n                    </div>\n                  )\n                })}\n                <section\n                  className=\"column is-full inquiry-section no-print\"\n                >\n                  <div\n                    style={{\n                      position: 'sticky',\n                      top: '65px',\n                      background: '#FFF',\n                      zIndex: '25',\n                      display: 'block',\n                      padding: '0.75rem 0.75rem 0.75rem 0',\n                    }}\n                  >\n                    <h3 id=\"inquiry\" className=\"title is-size-4\">{post.title} Inquiries</h3>\n                  </div>\n                  <FormContact\n                    section={post.title}\n                    manufacturers={manufacturers}\n                    recaptchaKey={siteMetadata.recaptchaKey}\n                  />\n                </section>\n              </div>\n            </div>\n          </div>\n        </section>\n      </Layout>\n    )\n  }\n}\n\nexport default ManufacturerPostTemplate\n\nexport const pageQuery = graphql`\n  query ManufacturerPostBySlug($slug: String!, $title: String!) {\n    contentfulManufacturer(slug: { eq: $slug }) {\n      title\n      slug\n      tags\n      url\n      publishDate\n      resizeImages\n      description {\n        childMarkdownRemark {\n          html\n        }\n        internal {\n          content\n        }\n      }\n      heroImage {\n        title\n        description\n        gatsbyImageData\n      }\n      logoImageDark {\n        title\n        description\n        gatsbyImageData\n      }\n    }\n    allMarkdownRemark(\n      filter: { frontmatter: { manufacturer: { eq: $title } } }\n      sort: { fields: [frontmatter___title] }\n    ) {\n      tags: distinct(field: frontmatter___tags)\n      groupedProducts: group(field: frontmatter___category) {\n        fieldValue\n        nodes {\n          id\n          frontmatter {\n            title\n            category\n            description\n            designer\n            href\n            manufacturer\n            subtitle\n            tags\n            slug\n            date\n            image_primary {\n              childImageSharp {\n                gatsbyImageData(\n                  width: 300\n                  height: 300\n                  placeholder: BLURRED\n                  transformOptions: { fit: COVER, cropFocus: ATTENTION }\n                )\n              }\n            }\n          }\n        }\n      }\n    }\n    allContentfulManufacturer(sort: { fields: [title] }) {\n      edges {\n        node {\n          id\n          title\n        }\n      }\n    }\n    site {\n      siteMetadata {\n        description\n        publisher\n        recaptchaKey\n        shareImage\n        shareImageHeight\n        shareImageWidth\n        siteUrl\n        title\n        userTwitter\n      }\n    }\n  }\n`\n"],"sourceRoot":""}