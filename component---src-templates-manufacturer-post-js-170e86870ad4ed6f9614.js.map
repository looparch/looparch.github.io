{"version":3,"sources":["webpack:///./src/templates/manufacturer-post.js","webpack:///./src/components/SEOProduct/generateMarkdownProductJSONLD.js","webpack:///./src/components/md-product-preview.js"],"names":["ManufacturerPostTemplate","props","groupedProducts","data","allMarkdownRemark","firstGroup","slice","localProductGroups","uniqueProductGroups","map","productGroup","groupName","voca","titleCase","fieldValue","replace","push","name","anchor","Set","state","windowHeight","productGroups","iterableGroups","scrollToId","id","e","console","log","stopPropagation","el","document","getElementById","height","window","scrollTo","offsetLeft","offsetTop","offsetHeight","componentDidMount","this","setState","render","siteMetadata","site","siteTitle","title","post","contentfulManufacturer","manufacturers","allContentfulManufacturer","edges","pagePath","slug","postNode","location","className","image","logoImageDark","gatsbyImageData","alt","heroImage","dangerouslySetInnerHTML","__html","description","childMarkdownRemark","html","href","url","target","rel","node","iterator","key","onClick","style","position","top","background","zIndex","display","nodes","product","fm","frontmatter","generateMarkdownProductJSONLD","path","pathname","padding","section","recaptchaKey","React","Component","manufacturer","siteUrl","getSrc","image_primary","childImageSharp","unescape","sku","mpn","review","reviewRating","ratingValue","bestRating","author","publisher","aggregateRating","reviewCount","brand","logo","offers","price","priceCurrency","priceValidUntil","availability","MdProductPreviewTemplate","VariableImage","to","hrefLang","truncate"],"mappings":"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","file":"component---src-templates-manufacturer-post-js-170e86870ad4ed6f9614.js","sourcesContent":["import React from 'react'\nimport { Helmet } from 'react-helmet'\nimport { GatsbyImage } from 'gatsby-plugin-image'\nimport { graphql } from 'gatsby'\nimport voca from 'voca'\n\nimport MdProductPreview from '../components/md-product-preview'\nimport FormFormspree from '../components/form-formspree'\nimport Layout from '../components/layout'\nimport SEO from '../components/seo'\n\nimport generateMarkdownProductJSONLD from '../components/SEOProduct/generateMarkdownProductJSONLD'\n\nimport styles from './manufacturer-post.sass'\n\nclass ManufacturerPostTemplate extends React.Component {\n  constructor(props) {\n    super(props)\n\n    const groupedProducts = this.props.data.allMarkdownRemark.groupedProducts\n    const firstGroup = groupedProducts.slice(0, 1)\n    let localProductGroups = []\n    let uniqueProductGroups = []\n    groupedProducts.map((productGroup) => {\n      const groupName = voca.titleCase(\n        productGroup.fieldValue.replace(/\\-/g, ' ')\n      )\n\n      localProductGroups.push({\n        name: groupName,\n        anchor: productGroup.fieldValue,\n      })\n      uniqueProductGroups = [...new Set(localProductGroups)]\n    })\n    this.state = {\n      windowHeight: 1000,\n      productGroups: uniqueProductGroups,\n      iterableGroups: firstGroup,\n      groupedProducts,\n    }\n  }\n\n  scrollToId(id, e) {\n    console.log(id)\n    e.stopPropagation()\n    const el = document.getElementById(id)\n    console.log(el.height)\n    window.scrollTo(el.offsetLeft, el.offsetTop + el.offsetHeight)\n  }\n\n  componentDidMount() {\n    this.setState({ iterableGroups: this.state.groupedProducts })\n  }\n\n  render() {\n    const siteMetadata = this.props.data.site.siteMetadata\n    const siteTitle = siteMetadata.title\n    const post = this.props.data.contentfulManufacturer\n    const groupedProducts =\n      this.props.data.allMarkdownRemark.groupedProducts || []\n    const manufacturers = this.props.data.allContentfulManufacturer || {\n      edges: [],\n    }\n\n    return (\n      <Layout>\n        <Helmet title={`${post.title} | ${siteTitle}`} />\n        <SEO\n          pagePath={`manufacturers/${post.slug}`}\n          siteMetadata={siteMetadata}\n          postNode={post}\n          location={this.props.location}\n        />\n\n        <h1 className=\"is-sr-only\">{`${post.title} | ${siteTitle}`}</h1>\n        <section className=\"section\" id=\"manufacturer-post\">\n          <div className=\"container\">\n            <div className=\"columns is-multiline is-variable is-6\">\n              <div className=\"column is-one-third\">\n                <GatsbyImage\n                  image={post.logoImageDark.gatsbyImageData}\n                  alt={post.logoImageDark.title}\n                  title={post.logoImageDark.title}\n                  className=\"image\"\n                />\n                <br />\n                <br />\n                <GatsbyImage\n                  image={post.heroImage.gatsbyImageData}\n                  alt={post.heroImage.title}\n                  title={post.heroImage.title}\n                  className=\"image\"\n                />\n                <br />\n                <br />\n                <div\n                  className=\"content\"\n                  dangerouslySetInnerHTML={{\n                    __html: post.description.childMarkdownRemark.html,\n                  }}\n                />\n                <div className=\"content\">\n                  <div className=\"field is-grouped\">\n                    <p className=\"control no-print\">\n                      <a\n                        href={post.url}\n                        target=\"_blank\"\n                        className=\"button is-primary\"\n                        rel=\"noopener\"\n                      >\n                        <span>Visit {post.title}</span>\n                      </a>\n                    </p>\n                    <p className=\"control no-print\">\n                      <a href=\"#inquiry\" className=\"button is-secondary\">\n                        <span>Inquire</span>\n                      </a>\n                    </p>\n                  </div>\n                  <br />\n                  <div className=\"tags\">\n                    {this.state.productGroups.map((node, iterator) => {\n                      return (\n                        <span\n                          className=\"tag\"\n                          key={iterator}\n                          onClick={(e) => this.scrollToId(node.anchor, e)}\n                        >\n                          <a>{node.name}</a>\n                        </span>\n                      )\n                    })}\n                  </div>\n                </div>\n              </div>\n              <div className=\"column is-marginless\">\n                {this.state.iterableGroups.map((productGroup, iterator) => {\n                  const groupName = voca.titleCase(\n                    productGroup.fieldValue.replace(/\\-/g, ' ')\n                  )\n                  return (\n                    <div key={iterator}>\n                      <div\n                        id={productGroup.fieldValue}\n                        className=\"column is-full is-marginless\"\n                        style={{\n                          position: 'sticky',\n                          top: '65px',\n                          background: '#FFF',\n                          zIndex: '25',\n                          display: 'block',\n                        }}\n                      >\n                        <h2\n                          className=\"title is-size-4\"\n                          style={{\n                            background: '#FFF',\n                            display: 'block',\n                          }}\n                        >\n                          {groupName}\n                        </h2>\n                      </div>\n                      {productGroup.nodes.map((product) => {\n                        const fm = product.frontmatter\n                        const jsonLd = generateMarkdownProductJSONLD(\n                          product,\n                          post,\n                          siteMetadata\n                        )\n                        return (\n                          <div\n                            key={product.id}\n                            className=\"column is-inline-block is-one-third-desktop is-half-tablet is-half-mobile\"\n                            style={{ zIndex: '500' }}\n                          >\n                            <MdProductPreview\n                              product={fm}\n                              post={post}\n                              siteMetadata={siteMetadata}\n                              path={this.props.location.pathname}\n                            />\n                          </div>\n                        )\n                      })}\n                    </div>\n                  )\n                })}\n                <section\n                  id=\"inquiry\"\n                  className=\"column is-full inquiry-section no-print\"\n                >\n                  <div\n                    style={{\n                      position: 'sticky',\n                      top: '65px',\n                      background: '#FFF',\n                      zIndex: '25',\n                      display: 'block',\n                      padding: '0.75rem 0.75rem 0.75rem 0',\n                    }}\n                  >\n                    <h3 className=\"title is-size-4\">{post.title} Inquiries</h3>\n                  </div>\n                  <FormFormspree\n                    section={post.title}\n                    manufacturers={manufacturers}\n                    recaptchaKey={siteMetadata.recaptchaKey}\n                  />\n                </section>\n              </div>\n            </div>\n          </div>\n        </section>\n      </Layout>\n    )\n  }\n}\n\nexport default ManufacturerPostTemplate\n\nexport const pageQuery = graphql`\n  query ManufacturerPostBySlug($slug: String!, $title: String!) {\n    contentfulManufacturer(slug: { eq: $slug }) {\n      title\n      slug\n      tags\n      url\n      publishDate\n      resizeImages\n      description {\n        childMarkdownRemark {\n          html\n        }\n        internal {\n          content\n        }\n      }\n      heroImage {\n        title\n        description\n        gatsbyImageData\n      }\n      logoImageDark {\n        title\n        description\n        gatsbyImageData\n      }\n    }\n    allMarkdownRemark(\n      filter: { frontmatter: { manufacturer: { eq: $title } } }\n      sort: { fields: [frontmatter___title] }\n    ) {\n      tags: distinct(field: frontmatter___tags)\n      groupedProducts: group(field: frontmatter___category) {\n        fieldValue\n        nodes {\n          id\n          frontmatter {\n            title\n            category\n            description\n            designer\n            href\n            manufacturer\n            subtitle\n            tags\n            slug\n            date\n            image_primary {\n              childImageSharp {\n                gatsbyImageData(\n                  width: 300\n                  height: 300\n                  placeholder: BLURRED\n                  transformOptions: { fit: COVER, cropFocus: ATTENTION }\n                )\n              }\n            }\n          }\n        }\n      }\n    }\n    allContentfulManufacturer(sort: { fields: [title] }) {\n      edges {\n        node {\n          id\n          title\n        }\n      }\n    }\n    site {\n      siteMetadata {\n        title\n        siteUrl\n        description\n        shareImage\n        shareImageWidth\n        shareImageHeight\n        publisher\n        recaptchaKey\n      }\n    }\n  }\n`\n","import React from 'react'\nimport Helmet from 'react-helmet'\nimport { getSrc } from 'gatsby-plugin-image'\n\nexport default function generateMarkdownProductJSONLD(\n  product,\n  manufacturer,\n  siteMetadata\n) {\n  return {\n    '@context': 'http://schema.org',\n    '@type': 'Product',\n    name: product.frontmatter.title,\n    image: [\n      `${siteMetadata.siteUrl}${getSrc(\n        product.frontmatter.image_primary.childImageSharp.gatsbyImageData\n      )}`,\n    ],\n    description: `${\n      unescape(product.frontmatter.description) ||\n      `${product.frontmatter.manufacturer} - ${product.frontmatter.title}` ||\n      ''\n    }`,\n    sku: `${product.id}`,\n    mpn: `${product.id}`,\n    review: {\n      '@type': 'Review',\n      reviewRating: {\n        '@type': 'Rating',\n        ratingValue: '5',\n        bestRating: '5',\n      },\n      author: {\n        '@type': 'Person',\n        name: siteMetadata.publisher,\n        url: siteMetadata.siteUrl,\n      },\n    },\n    aggregateRating: {\n      '@type': 'AggregateRating',\n      ratingValue: '5',\n      reviewCount: '1',\n    },\n    brand: {\n      '@type': 'Brand',\n      name: manufacturer.title,\n      logo: `https:${getSrc(manufacturer.logoImageDark.gatsbyImageData)}`,\n    },\n    offers: {\n      '@type': 'Offer',\n      price: '1.00',\n      priceCurrency: 'USD',\n      priceValidUntil: '2020-01-01',\n      availability: 'InStock',\n      url: `${siteMetadata.siteUrl}${product.frontmatter.slug}`,\n    },\n  }\n}\n","import React from 'react'\nimport { Link } from 'gatsby'\nimport { GatsbyImage } from 'gatsby-plugin-image'\nimport voca from 'voca'\n\nimport styles from './product-preview.sass'\n\nclass MdProductPreviewTemplate extends React.Component {\n  constructor(props) {\n    super(props)\n  }\n\n  render() {\n    const product = this.props.product\n    const post = this.props.post\n\n    const description = product.description || product.title\n\n    const VariableImage = (\n      <GatsbyImage\n        image={product.image_primary.childImageSharp.gatsbyImageData}\n        alt={description}\n        title={`${post.title} ${product.title}`}\n        className={`image product-preview-image fluid`}\n      />\n    )\n\n    return (\n      <article className={`product-preview ${post.slug}`} id={product.title}>\n        <Link to={product.slug} hrefLang=\"en\" rel=\"help\">\n          <div>{VariableImage}</div>\n          <h3 className=\"is-size-6\">{voca.truncate(product.title, 22)}</h3>\n        </Link>\n      </article>\n    )\n  }\n}\nexport default MdProductPreviewTemplate\n"],"sourceRoot":""}